/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getTheNameOfThisParentProcess_065a303129
ROOST_METHOD_SIG_HASH=getTheNameOfThisParentProcess_656d37940c

"""
Scenario 1: Get name of the parent process in standard situation
TestName: checkGetNameOfThisParentProcess
Description: The test is meant to check the functionality of the getTheNameOfThisParentProcess method and ensure it returns the name of the parent process correctly.
Execution:
  Arrange: Instantiate an instance of ParentProcessReadingBean and set the name of this parent process.
  Act: Invoke the getTheNameOfThisParentProcess method on the instance.
  Assert: Use JUnit assertion to check if the returned name is the name we set up.
Validation:
  The assertion verifies that the name returned by the method is the same as the name we set up. The test confirms that the method correctly fetches and returns the name of the parent process.

Scenario 2: Get name of the parent process when name is null
TestName: checkGetNameOfThisParentProcessWhenNull
Description: The test is meant to ensure that the getTheNameOfThisParentProcess method behaves correctly when the name of the parent process is null.
Execution:
  Arrange: Instantiate an instance of ParentProcessReadingBean without setting the name of the parent process.
  Act: Invoke the getTheNameOfThisParentProcess method on the instance.
  Assert: Use JUnit assertion to check if the returned name is null.
Validation:
  The assertion verifies that the name returned by the method is null, as we have not set any name for the parent process. The test confirms that the method handles null values correctly.

Scenario 3: Get name of the parent process after creating a new instance
TestName: checkGetNameOfThisParentProcessAfterNewInstance
Description: The test is meant to check the functionality of the getTheNameOfThisParentProcess method after creating a new copy of ParentProcessReadingBean and ensure it works correctly.
Execution:
  Arrange: Instantiate an instance of ParentProcessReadingBean, set the name of this parent process and then get the new copy.
  Act: Invoke the getTheNameOfThisParentProcess method on the new copy.
  Assert: Use JUnit assertion to check if the returned name is the name we set up for the original instance.
Validation:
  The assertion verifies that the name returned by the method from the new copy is the same as the name we set up for the original instance. The test confirms that the method correctly works with the new copies.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;

public class ParentProcessReadingBeanGetTheNameOfThisParentProcessTest {

	private static final String PARENT_PROCESS_NAME = "TestParentProcess";

	@Test
	@Tag("valid")
	public void checkGetNameOfThisParentProcess() {
		ParentProcessReadingBean parentProcessReadingBean = new ParentProcessReadingBean(1, "MonitorClass",
				PARENT_PROCESS_NAME, "TestProcess", "unit");
		String nameOfThisParentProcess = parentProcessReadingBean.getTheNameOfThisParentProcess();
		assertEquals(PARENT_PROCESS_NAME, nameOfThisParentProcess,
				"Returned name of this parent process should match the name we initialized the class with.");
	}

	@Test
	@Tag("boundary")
	public void checkGetNameOfThisParentProcessWhenNull() {
		ParentProcessReadingBean parentProcessReadingBean = new ParentProcessReadingBean();
		String nameOfThisParentProcess = parentProcessReadingBean.getTheNameOfThisParentProcess();
		assertNull(nameOfThisParentProcess, "Returned name of this parent process should be null as no name was set.");
	}

	@Test
	@Tag("integration")
	public void checkGetNameOfThisParentProcessAfterNewInstance() {
		ParentProcessReadingBean parentProcessReadingBean = new ParentProcessReadingBean(1, "MonitorClass",
				PARENT_PROCESS_NAME, "TestProcess", "unit");
		ParentProcessReadingBean newInstance = parentProcessReadingBean.getNewCopy();
		String nameOfThisParentProcess = newInstance.getTheNameOfThisParentProcess();
		assertEquals(PARENT_PROCESS_NAME, nameOfThisParentProcess,
				"Returned name of this parent process should match the name we initialized the original class with, even after creating a new instance.");
	}

}