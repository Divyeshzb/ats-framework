// ********RoostGPT********
/*
Test generated by RoostGPT for test axay-unit-dm using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getTerminationString_7a18be06e4
ROOST_METHOD_SIG_HASH=getTerminationString_b1847435d5
"""
Scenario 1: Test when termination is for UNIX
Details:
  TestName: testGetTerminationStringForUnix
  Description: This test is meant to check if the function correctly returns the end of line ("\n") when the platform is UNIX.
Execution:
  Arrange: Declare and initialize a platform variable to UNIX.
  Act: Call the getTerminationString method on the object.
  Assert: Use JUnit assertions to check if the response is "\n".
Validation:
  The successful execution of assertions would prove that our function can handle UNIX system and return the correct value. It confirms the implementation of end of line sequence for UNIX system.
Scenario 2: Test when termination is for MACOS
Details:
  TestName: testGetTerminationStringForMac
  Description: This test is meant to check if the function returns the correct end of line ("\r") when the platform is MACOS.
Execution:
  Arrange: Declare and initialize platform variable to MACOS.
  Act: Call the getTerminationString method on the object.
  Assert: Use JUnit assertions to check if the returned string is "\r".
Validation:
  The successful assertion verifies the implementation of correct termination string for MACOS.
Scenario 3: Test when termination is for WINDOWS
Details:
  TestName: testGetTerminationStringForWindows
  Description: This test checks if the function properly returns the end of line string ("\r\n") for the WINDOWS platform.
Execution:
  Arrange: Declare and initialize a platform variable to WINDOWS.
  Act: Invoke the getTerminationString method on the object.
  Assert: Use JUnit assertions to check if the returned string is "\r\n".
Validation:
  The correct execution of this test confirms the valid handling of WINDOWS system and returns appropriate string.
Scenario 4: Test for unsupported platform
Details:
  TestName: testGetTerminationStringForInvalid
  Description: Test is to verify if the function throws IllegalArgumentException for unsupported platform.
Execution:
  Arrange: Declare and initialize a platform variable to an unsupported platform (e.g., LINUX).
  Act: Call the getTerminationString method on the object.
  Assert: Use JUnit assertions to check if an IllegalArgumentException is thrown.
Validation:
  The successful assertion verifies that the function appropriately handles unsupported platform cases and throws an IllegalArgumentException.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import org.junit.jupiter.api.Test;
import com.axway.ats.common.PublicAtsApi;
import com.axway.ats.common.systemproperties.AtsSystemProperties;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.getTerminationString")
public class EndOfLineStyleGetTerminationStringTest {

	@Test
	public void testGetTerminationStringForUnix() {
		assertNotNull(PublicAtsApi.EndOfLineStyle.UNIX.getTerminationString());
		assertEquals("\n", PublicAtsApi.EndOfLineStyle.UNIX.getTerminationString());
	}

	@Test
	public void testGetTerminationStringForMac() {
		assertNotNull(PublicAtsApi.EndOfLineStyle.MACOS.getTerminationString());
		assertEquals("\r", PublicAtsApi.EndOfLineStyle.MACOS.getTerminationString());
	}

	@Test
	public void testGetTerminationStringForWindows() {
		assertNotNull(PublicAtsApi.EndOfLineStyle.WINDOWS.getTerminationString());
		assertEquals("\r\n", PublicAtsApi.EndOfLineStyle.WINDOWS.getTerminationString());
	}

	@Test
	public void testGetTerminationStringForInvalid() {
		try {
			assertNotNull(PublicAtsApi.EndOfLineStyle.LINUX.getTerminationString());
		}
		catch (IllegalArgumentException e) {
			assertEquals("End of line style " + PublicAtsApi.EndOfLineStyle.LINUX + " is not supported",
					e.getMessage());
		}
	}

}