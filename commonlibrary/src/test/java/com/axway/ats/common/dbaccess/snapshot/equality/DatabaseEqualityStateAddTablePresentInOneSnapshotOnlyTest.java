/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addTablePresentInOneSnapshotOnly_0e4c6ee04e
ROOST_METHOD_SIG_HASH=addTablePresentInOneSnapshotOnly_18a2ad8908
"""
Scenario 1: Test when snapshotName is not present in the map
Details:
  TestName: testAddTableWhenSnapshotNotInMap
  Description: This test verifies that the method is capable of adding a new snapshot and associated table to the 'tablePresentInOneSnapshotOnly' map when the snapshot is not already present in the map.
Execution:
  Arrange: Set up the 'tablePresentInOneSnapshotOnly' map empty and set the 'snapshotName' to an arbitrary value and the 'table' to another arbitrary value.
  Act: Invoke the 'addTablePresentInOneSnapshotOnly' method with the 'snapshotName' and 'table'.
  Assert: Use JUnit assertions to verify the 'tablePresentInOneSnapshotOnly' map contains the 'snapshotName' as a key, and its associated list contains the 'table' string.
Validation:
  The assertion aims to validate that the method correctly adds a key-value pair to the 'tablePresentInOneSnapshotOnly' map when the key doesn't exist. This test is significant as it ensures that the method can correctly add new entries to the map.
Scenario 2: Test when snapshotName is already present in the map
Details:
  TestName: testAddTableWhenSnapshotInMap
  Description: This test verifies that the method is capable of adding a table to the list of an already existing snapshot in the 'tablePresentInOneSnapshotOnly' map.
Execution:
  Arrange: Set up a 'tablePresentInOneSnapshotOnly' map with some 'snapshotName' and associated list. Set the 'table' to a string not already present in the list.
  Act: Invoke the 'addTablePresentInOneSnapshotOnly' method with the 'snapshotName' and 'table'.
  Assert: Use JUnit assertions to verify that the 'table' string is added to the list of the corresponding 'snapshotName'.
Validation:
  The assertion aims to validate that the method correctly adds a 'table' to the list of an existing key in the 'tablePresentInOneSnapshotOnly' map. This test is significant as it ensures that the method can handle addition to existing entries in the map.
Scenario 3: Exception scenario when null values are passed as arguments
Details:
  TestName: testAddTableWithNullArguments
  Description: This test verifies that the method is handling null values for the 'snapshotName' and 'table' arguments.
Execution:
  Arrange: No setup required for this scenario.
  Act: Invoke the 'addTablePresentInOneSnapshotOnly' method passing null for both 'snapshotName' and 'table'.
  Assert: Use JUnit assertions to verify that either a NullPointerException or a specific Exception is raised (based on the method implementation).
Validation:
  The assertion in this scenario would test the handling of null values passed to the method. Though not recommended, null handling could potentially prevent unexpected behavior or complications. For instance, the application could remain robust even if an incorrect null value is passed.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.dbaccess.snapshot.equality;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertThrows;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.dbaccess.snapshot.equality")
@Tag("com.axway.ats.common.dbaccess.snapshot.equality.addTablePresentInOneSnapshotOnly")
public class DatabaseEqualityStateAddTablePresentInOneSnapshotOnlyTest {

	private DatabaseEqualityState databaseEqualityState;

	@BeforeEach
	public void setup() {
		databaseEqualityState = new DatabaseEqualityState("snapshot1", "snapshot2");
	}

	@Test
	@Tag("valid")
	public void testAddTableWhenSnapshotNotInMap() {
		databaseEqualityState.addTablePresentInOneSnapshotOnly("snapshot3", "table1");
		Map<String, List<String>> tablesPerSnapshot = databaseEqualityState.getTablePresentInOneSnapshotOnly();
		assertNotNull(tablesPerSnapshot.get("snapshot3"));
		assertTrue(tablesPerSnapshot.get("snapshot3").contains("table1"));
	}

	@Test
	@Tag("valid")
	public void testAddTableWhenSnapshotInMap() {
		String snapshotName = "snapshot1";
		String table1 = "table1";
		databaseEqualityState.addTablePresentInOneSnapshotOnly(snapshotName, table1);
		String table2 = "table2";
		databaseEqualityState.addTablePresentInOneSnapshotOnly(snapshotName, table2);
		Map<String, List<String>> tablesPerSnapshot = databaseEqualityState.getTablePresentInOneSnapshotOnly();
		assertTrue(tablesPerSnapshot.get(snapshotName).contains(table1));
		assertTrue(tablesPerSnapshot.get(snapshotName).contains(table2));
	}

	@Test
	@Tag("invalid")
	public void testAddTableWithNullArguments() {
		assertThrows(NullPointerException.class, () -> {
			databaseEqualityState.addTablePresentInOneSnapshotOnly(null, null);
		});
	}

}