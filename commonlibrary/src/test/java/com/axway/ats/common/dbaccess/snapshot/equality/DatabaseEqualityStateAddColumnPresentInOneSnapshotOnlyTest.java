/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addColumnPresentInOneSnapshotOnly_928b9c2ee5
ROOST_METHOD_SIG_HASH=addColumnPresentInOneSnapshotOnly_0572777b3e
"""
Scenario 1: New Snapshot Creation
Details:
  TestName: newSnapshotCreation
  Description: This test ensures the method handles creation of a new snapshot correctly.
Execution:
  Arrange: Set up a new snapshotName and an empty columnPresentInOneSnapshotOnly map.
  Act: Invoke addColumnPresentInOneSnapshotOnly with the new snapshotName, table, and column.
  Assert: Verify the snapshotName is now a key in the columnPresentInOneSnapshotOnly map with the correct table and column details.
Validation:
  This assertion verifies whether the table and column details are correctly associated with the snapshotName on a new snapshot creation.
  This is important as it validates the snapshot creation process.
Scenario 2: Existing Snapshot Update
Details:
  TestName: existingSnapshotUpdate
  Description: This test checks if the correct table and column details are added for an existing snapshot.
Execution:
  Arrange: Use an existing snapshotName with certain tables and columns already present in columnPresentInOneSnapshotOnly.
  Act: Invoke addColumnPresentInOneSnapshotOnly with the existing snapshotName and a new table and column.
  Assert: Check if tablesPerSnapshot for the existing snapshotName now includes the new table and columns.
Validation:
  The test verifies if the method is correctly adding new tables and columns to an existing snapshot.
  This confirms the update process of the snapshot that the method is supposed to handle.
Scenario 3: Removing snapshot and Maintaining Data Integrity
Details:
  TestName: addColumnAfterRemovingSnapshot
  Description: This test inspects the method's behavior when a snapshot is removed and a column is added to it.
Execution:
  Arrange:  Remove a snapshot from the columnPresentInOneSnapshotOnly.
  Act: Invoke addColumnPresentInOneSnapshotOnly with the removed snapshotName, a table, and a column.
  Assert: Verify that the tablesPerSnapshot and columnsPerTable for the snapshot are correctly retained and updated with the new data after the snapshot was removed.
Validation:
  This test confirms that the method properly handles column additions even with snapshot removals.
  It ensures data integrity and accurate snapshot reinstatement.
Scenario 4: Handling Null Values
Details:
  TestName: handlingNullValues
  Description: The purpose of this test is to confirm the method handles null values correctly.
Execution:
  Arrange: Set a snapshot with a 'null' columnDetail value in columnPresentInOneSnapshotOnly.
  Act: Invoke addColumnPresentInOneSnapshotOnly with the snapshotName, table, and null column.
  Assert: Verify that the method does not add 'null' to columnsPerTable for that snapshot.
Validation:
  Validation of this scenario ensures that the method correctly handles null values.
  The significance of this test is ensuring that null values do not disrupt the functionality of the method or cause data inconsistencies.
Note: The method does not exhibit behavior that leads to scenario-specific exceptions or errors hence error handling scenarios were not provided.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.dbaccess.snapshot.equality;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.dbaccess.snapshot.equality")
@Tag("com.axway.ats.common.dbaccess.snapshot.equality.addColumnPresentInOneSnapshotOnly")
public class DatabaseEqualityStateAddColumnPresentInOneSnapshotOnlyTest {

	private DatabaseEqualityState databaseEqualityState;

	private Map<String, Map<String, List<String>>> columnPresentInOneSnapshotOnly;

	@BeforeEach
	public void setup() {
		databaseEqualityState = new DatabaseEqualityState("Snapshot1", "Snapshot2");
		columnPresentInOneSnapshotOnly = new TreeMap<>();
	}

	@Test
	@Tag("valid")
	public void newSnapshotCreation() {
		String snapshotName = "Snapshot3";
		String table = "Table1";
		String column = "Column1";
		databaseEqualityState.addColumnPresentInOneSnapshotOnly(snapshotName, table, column);

		Map<String, List<String>> tablesPerSnapshot = columnPresentInOneSnapshotOnly.get(snapshotName);
		assertTrue(tablesPerSnapshot.containsKey(table), "Table not found in snapshot");
		List<String> columnsPerTable = tablesPerSnapshot.get(table);
		assertTrue(columnsPerTable.contains(column), "Column not found in table for snapshot");
	}

	@Test
	@Tag("valid")
	public void existingSnapshotUpdate() {
		String snapshotName = "Snapshot1";
		String table = "Table1";
		String column = "Column1";
		List<String> columns = new ArrayList<>();
		columns.add(column);
		Map<String, List<String>> tables = new TreeMap<>();
		tables.put(table, columns);
		columnPresentInOneSnapshotOnly.put(snapshotName, tables);

		String newColumn = "Column2";
		databaseEqualityState.addColumnPresentInOneSnapshotOnly(snapshotName, table, newColumn);
		List<String> columnsPerTable = tables.get(table);
		assertTrue(columnsPerTable.contains(newColumn), "New column not found in existing snapshot");
	}

	@Test
	@Tag("valid")
	public void addColumnAfterRemovingSnapshot() {
		String snapshotName = "Snapshot1";
		String table = "Table1";
		String column = "Column1";
		columnPresentInOneSnapshotOnly.remove(snapshotName);

		databaseEqualityState.addColumnPresentInOneSnapshotOnly(snapshotName, table, column);
		Map<String, List<String>> tablesPerSnapshot = columnPresentInOneSnapshotOnly.get(snapshotName);
		assertTrue(tablesPerSnapshot.containsKey(table), "Table not found in snapshot after adding column");
		List<String> columnsPerTable = tablesPerSnapshot.get(table);
		assertTrue(columnsPerTable.contains(column), "Column not found in table for snapshot after addition");
	}

	@Test
	@Tag("invalid")
	public void handlingNullValues() {
		String snapshotName = "Snapshot1";
		String table = "Table1";
		String column = null;
		databaseEqualityState.addColumnPresentInOneSnapshotOnly(snapshotName, table, column);

		Map<String, List<String>> tablesPerSnapshot = columnPresentInOneSnapshotOnly.get(snapshotName);
		assertTrue(tablesPerSnapshot.containsKey(table), "Table not found in snapshot with null column");
		List<String> columnsPerTable = tablesPerSnapshot.get(table);
		assertFalse(columnsPerTable.contains(column), "Null column found in table for snapshot");
	}

}