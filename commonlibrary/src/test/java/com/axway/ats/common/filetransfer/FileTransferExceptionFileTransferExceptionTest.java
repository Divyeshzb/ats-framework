/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=FileTransferException_bf29b7571c
ROOST_METHOD_SIG_HASH=FileTransferException_77cee0dfd2

"""
Scenario 1: Validating that a FileTransferException is thrown with correct message and Exception cause.

Details:
  TestName: testFileTransferExceptionInvokedWithMessageAndException
  Description: This test checks that the constructor for FileTransferException correctly initializes the instance with provided message and exception. Exception object should be the cause of the FileTransferException.

Execution:
  Arrange: Create an Exception 'e' to be the cause of FileTransferException. Define a string 'message' to be the detail message of FileTransferException.
  Act: Invoke FileTransferException constructor passing 'message' and 'e' as parameters.
  Assert: Validate that message returned by getMessage() equals 'message' and cause returned by getCause() equals 'e'.

Validation:
  This test verifies that FileTransferException is correctly initialized with given message and exception. This is important, as in the event of an Exception, correct message and cause assists in debugging the issue.

Scenario 2: Validating FileTransferException initialization with null message and valid Exception cause.

Details:
  TestName: testFileTransferExceptionWithNullExceptionMessage
  Description: This test is to check if FileTransferException handle null as input message but a valid Exception cause.

Execution:
  Arrange: Create an Exception 'e' to be the cause. Define a string 'message' as null.
  Act: Invoke the FileTransferException constructor passing 'message' and 'e' as parameters.
  Assert: Assert that the getMessage() returns null and getCause() equals 'e'.

Validation:
  This verifies that FileTransferException handles null message inputs correctly and it doesn't hinder its proper functioning of storing Exception cause.

Scenario 3: Validating FileTransferException initialization with valid message and null Exception cause.

Details:
  TestName: testFileTransferExceptionWithNullExceptionCause
  Description: This test is to verify if FileTransferException handles a valid message and null as Exception cause.

Execution:
  Arrange: Create a string 'message'. Set Exception 'e' as null.
  Act: Invoke the FileTransferException constructor passing 'message' and 'e' as parameters.
  Assert: Assert that the getMessage() equals 'message' and getCause() returns null.

Validation:
  This test verifies that FileTransferException handles null exception inputs correctly and doesn't hinder its proper functioning of storing detail message.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filetransfer;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import com.axway.ats.common.PublicAtsApi;

public class FileTransferExceptionFileTransferExceptionTest {

	@Tag('valid')
    @Test
    public void testFileTransferExceptionInvokedWithMessageAndException() {
        // Arrange
        Exception e = new Exception("Test Exception Cause");
        String message = "Test Exception Message";
        // Act
        FileTransferException ex = new FileTransferException(message, e);
        // Assert
        Assertions.assertEquals(message, ex.getMessage());
        Assertions.assertEquals(e, ex.getCause());
    }

	@Tag
	('boundary')@Test public void testFileTransferExceptionWithNullExceptionMessage() {
		// Arrange
		Exception expectedException = new Exception("Test Exception Cause");
		String message = null;
		// Act
		FileTransferException ex = new FileTransferException(message, expectedException);
		// Assert
		Assertions.assertNull(ex.getMessage());
		Assertions.assertEquals(expectedException, ex.getCause());
	}

	@Tag
	('boundary')@Test public void testFileTransferExceptionWithNullExceptionCause() {
		// Arrange
		String message = "Test Exception Message";
		// Act
		FileTransferException ex = new FileTransferException(message, null);
		// Assert
		Assertions.assertEquals(message, ex.getMessage());
		Assertions.assertNull(ex.getCause());
	}

}