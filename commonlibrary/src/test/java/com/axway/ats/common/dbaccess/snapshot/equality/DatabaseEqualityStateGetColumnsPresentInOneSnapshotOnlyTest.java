/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getColumnsPresentInOneSnapshotOnly_be2d5798bb
ROOST_METHOD_SIG_HASH=getColumnsPresentInOneSnapshotOnly_984823fee0

"""
  Scenario 1: Test when valid snapshot and table names are provided in getColumnsPresentInOneSnapshotOnly method

  Details:
    TestName: testGetColumnsForValidSnapshotAndTable
    Description: This test scenario is meant to check the normal behavior of the getColumnsPresentInOneSnapshotOnly method when valid snapshot name and table name are used as parameters. The scenario aims to verify that the method returns the expected output.

  Execution:
    Arrange: Create an instance of DatabaseEqualityState. Use available entity methods to set initial snapshot data.
    Act: Invoke getColumnsPresentInOneSnapshotOnly method with valid snapshot and table names.
    Assert: Check if the returned list of columns' descriptions matches the expected output.

  Validation:
    The test verifies if getColumnsPresentInOneSnapshotOnly correctly retrieves the expected columns data associated with specific table and snapshot. The method should handle valid parameters without errors and return correct data.


  Scenario 2: Test when invalid snapshot name is provided

  Details:
    TestName: testGetColumnsForInvalidSnapshot
    Description: Test scenario concerning an invalid snapshot name in getColumnsPresentInOneSnapshotOnly to verify the method's error handling.

  Execution:
    Arrange: Create an instance of DatabaseEqualityState.
    Act: Invoke getColumnsPresentInOneSnapshotOnly method with invalid snapshot name and any table name.
    Assert: Ensure that an appropriate exception is thrown or a certain handled behavior is triggered.

  Validation:
    The test verifies if getColumnsPresentInOneSnapshotOnly handles invalid snapshot names properly, throwing exceptions or returning an appropriate response.


  Scenario 3: Test when table does not exist in the provided snapshot

  Details:
    TestName: testGetColumnsForNonexistingTable
    Description: This scenario tests if a table that is not present in the given snapshot is handled appropriately by the getColumnsPresentInOneSnapshotOnly method.

  Execution:
    Arrange: Create an instance of DatabaseEqualityState.
    Act: Call getColumnsPresentInOneSnapshotOnly method with a snapshot name and a table name that does not exist in that snapshot.
    Assert: Assert that the method does not return any results or raises appropriate exception.

  Validation:
    This test checks if the method handles tables that do not exist in the provided snapshot appropriately and that it doesn't return any incorrect data or cause unexpected errors.


  Scenario 4: Test when snapshot contains no tables

  Details:
    TestName: testGetColumnsForSnapshotWithoutTables
    Description: This scenario tests how getColumnsPresentInOneSnapshotOnly method reacts if provided snapshot does not contain any tables.

  Execution:
    Arrange: Create an instance of DatabaseEqualityState. Set up a snapshot that does not contain any tables.
    Act: Invoke getColumnsPresentInOneSnapshotOnly method with the snapshot name from previous step and any table.
    Assert: Assert that the method does not return any results or raises appropriate exception.

  Validation:
    This test verifies if getColumnsPresentInOneSnapshotOnly handles correctly snapshot that does not contain any tables, returning no records or triggering appropriate behavior.
  """
*/

// ********RoostGPT********

package com.axway.ats.common.dbaccess.snapshot.equality;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import java.util.List;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.axway.ats.common.dbaccess.snapshot.equality.DatabaseEqualityState;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.TreeMap;
import com.axway.ats.common.PublicAtsApi;

public class DatabaseEqualityStateGetColumnsPresentInOneSnapshotOnlyTest {

	private DatabaseEqualityState des;

	@BeforeEach
	public void setUp() {
		des = new DatabaseEqualityState("firstSnapshot", "secondSnapshot");
	}

	@Test
	@Tag("valid")
	public void testGetColumnsForValidSnapshotAndTable() {
		des.addColumnPresentInOneSnapshotOnly("firstSnapshot", "table1", "column1");
		des.addColumnPresentInOneSnapshotOnly("firstSnapshot", "table1", "column2");

		List<Map<String, String>> actualColumns = des.getColumnsPresentInOneSnapshotOnly("firstSnapshot", "table1");
		Map<String, String> expectedColumn1 = new HashMap<>();
		expectedColumn1.put("column1", "");
		Map<String, String> expectedColumn2 = new HashMap<>();
		expectedColumn2.put("column2", "");
		List<Map<String, String>> expectedColumns = Arrays.asList(expectedColumn1, expectedColumn2);
		assertEquals(expectedColumns, actualColumns);
	}

	@Test
	@Tag("invalid")
	public void testGetColumnsForInvalidSnapshot() {
		assertThrows(IllegalArgumentException.class,
				() -> des.getColumnsPresentInOneSnapshotOnly("invalidSnapshot", "table1"));
	}

	@Test
	@Tag("valid")
	public void testGetColumnsForNonexistingTable() {
		List<Map<String, String>> actualColumns = des.getColumnsPresentInOneSnapshotOnly("firstSnapshot",
				"nonExistingTable");
		assertEquals(0, actualColumns.size());
	}

	@Test
	@Tag("valid")
	public void testGetColumnsForSnapshotWithoutTables() {
		DatabaseEqualityState des2 = new DatabaseEqualityState("snapshotWithoutTables", "secondSnapshot");
		List<Map<String, String>> actualColumns = des2.getColumnsPresentInOneSnapshotOnly("snapshotWithoutTables",
				"table1");
		assertEquals(0, actualColumns.size());
	}

}