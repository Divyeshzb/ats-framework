/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getProvider_f153682cd1
ROOST_METHOD_SIG_HASH=getProvider_57fe74ed0a

"""
  Scenario 1: Test the getProvider Method when the SshCipher object has no provider set.

  Details:
    TestName: testGetProviderWhenProviderNotSet
    Description: The test is designed to check the getProvider method when the SshCipher object's provider attribute has not been set.
  Execution:
    Arrange: Initialize a SshCipher object without setting the provider attribute.
    Act: Invoke the getProvider method.
    Assert: Assert that the returned string is null.
  Validation:
    The Assertion verifies that the returned provider is null, which is the expected behavior when the provider attribute hasn't been set. This test is essential to ensure the object behaves as expected when uninitialized properties are queried.

  Scenario 2: Test the getProvider Method when the SshCipher object's provider attribute has been set.

  Details:
    TestName: testGetProviderWhenProviderIsSet
    Description: The test checks the getProvider method when a specific provider has been assigned to the SshCipher object.
  Execution:
    Arrange: Initialize a SshCipher object and set its provider attribute to a known value.
    Act: Invoke the getProvider method.
    Assert: Assert that the returned string matches the known provider value.
  Validation:
    The Assertion confirms that the getProvider method accurately reflects the current provider value. This test is pivotal for verifying that properties can be retrieved as expected after initialization.

  Scenario 3: Test the getProvider Method after the Provider is Updated.

  Details:
    TestName: testGetProviderAfterProviderUpdated
    Description: The test is designed to verify that the getProvider method reflects changes made to the provider attribute after its initial assignment.
  Execution:
    Arrange: Initialize a SshCipher object, set its provider attribute to a known value, and then change the provider to a new value.
    Act: Invoke the getProvider method.
    Assert: Assert that the returned string matches the updated provider value.
  Validation:
    This test ensures that getter methods reflect updates to the SshCipher object's state, validating object mutability principles and encapsulation logic.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filetransfer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;

public class SshCipherGetProviderTest {

	@Test
	@Tag("valid")
	public void testGetProviderWhenProviderNotSet() {
		// Arrange
		SshCipher sshCipher = new SshCipher("aes128-cbc", "AES/CBC/NoPadding", "BC", 16, 16);
		// Act
		String provider = sshCipher.getProvider();
		// Assert
		assertNull(provider, "The provider should be null when not set");
	}

	@Test
	@Tag("valid")
	public void testGetProviderWhenProviderIsSet() {
		// Arrange
		SshCipher sshCipher = new SshCipher("aes128-cbc", "AES/CBC/NoPadding", "BC", 16, 16);
		sshCipher.setProvider("BC");
		// Act
		String provider = sshCipher.getProvider();
		// Assert
		assertEquals("BC", provider, "The provider should match the set value");
	}

	@Test
	@Tag("valid")
	public void testGetProviderAfterProviderUpdated() {
		// Arrange
		SshCipher sshCipher = new SshCipher("aes128-cbc", "AES/CBC/NoPadding", "BC", 16, 16);
		sshCipher.setProvider("BC");
		sshCipher.setProvider("newProvider");
		// Act
		String provider = sshCipher.getProvider();
		// Assert
		assertEquals("newProvider", provider, "The provider should match the updated value");
	}

}