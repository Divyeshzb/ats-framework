/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getFilesDifferences_b807bc4bdd
ROOST_METHOD_SIG_HASH=getFilesDifferences_125aeece99
"""
Scenario 1: Files difference present in both snapshots
TestName: testPresenceOfFilesDifferencesInBothSnapshots
Description: This test scenario aims to validate the getFilesDifferences method when there are differing files in both snapshots.
Execution:
  Arrange: Mock the getDifferences() method's data to return differing FileTrace objects on both snapshots.
  Act: Call the getFilesDifferences() method.
  Assert: Assert that the returned map is not empty and contains the expected snapshot name and differences.
Validation:
  This assert ensures that the method correctly maps the difference between the two snapshots for every file. This test is significant as the primary function of the method is to determine and record differences between two snapshots.
Scenario 2: Identical snapshots with no files difference
TestName: testIdenticalSnapshotsWithNoFilesDifference
Description: This scenario tests the getFilesDifferences method under the condition of having two identical snapshots, thus no file differences.
Execution:
  Arrange: Mock the getDifferences() method's data to return the same FileTrace objects on both snapshots.
  Act: Call the getFilesDifferences() method.
  Assert: Assert that the returned map is empty.
Validation:
  This assert validates that the method can accurately assess when there are no differences between two snapshots. This scenario is crucial for ensuring that the method does not return false positives.
Scenario 3: Null snapshots are passed
TestName: testNullSnapshots
Description: The scenario tests the getFilesDifferences method when null snapshots are passed.
Execution:
  Arrange: Mock the getDifferences() method's data to return null for both snapshots.
  Act: Call the getFilesDifferences() method.
  Assert: Assert the expectation of a NullPointerException.
Validation:
  This assert verifies that the method handles null inputs correctly by throwing a NullPointerException. This test is significant for confirming the method's robustness against erroneous inputs.
Scenario 4: Multiple files differences in both snapshots
TestName: testMultipleFilesDifferencesInBothSnapshots
Description: This test scenario aims to validate the getFilesDifferences method when there are multiple differing files in both snapshots.
Execution:
  Arrange: Mock the getDifferences() method's data to return multiple differing FileTrace objects on both snapshots.
  Act: Call the getFilesDifferences() method.
  Assert: Assert that the returned map is not empty and contains the expected snapshot names and differences for each file difference.
Validation:
  This assert ensures that the method correctly maps the differences between the two snapshots for every differing file, even when multiple file differences exist in the snapshots. This test helps to verify the scalability and robustness of the method.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem.snapshot.equality;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;
import java.util.Collections;
import java.util.Comparator;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.performance.monitor.beans")
@Tag("com.axway.ats.common.performance.monitor.beans.equals")
@Tag("com.axway.ats.common.performance.monitor.beans.getValue")
@Tag("com.axway.ats.common.performance.monitor.beans.getValue")
@Tag("com.axway.ats.common.filesystem.snapshot.equality")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getFilesDifferences")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getDifferences")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getFirstSnapshotDifferencies")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getSecondSnapshotDifferencies")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getFirstSnapshotName")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getSecondSnapshotName")
public class FileSystemEqualityStateGetFilesDifferencesTest {

	FileSystemEqualityState fileSystemEqualityState;

	@Mock
	FileTrace fileTrace1, fileTrace2;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		fileSystemEqualityState = new FileSystemEqualityState("snap1", "snap2");
	}

	@Test
    public void testPresenceOfFilesDifferencesInBothSnapshots() {
        when(fileTrace1.getFirstSnapshotDifferencies()).thenReturn(new HashMap<String, String>() {{ put("file1", "yes"); }});
        when(fileTrace1.getSecondSnapshotDifferencies()).thenReturn(new HashMap<String, String>() {{ put("file1", "no"); }});
        when(fileTrace1.getDifferenceType()).thenReturn(DifferenceType.FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY);
        fileSystemEqualityState.getDifferences().addAll(Arrays.asList(fileTrace1));

        Map<String, Map<String, String>> result = fileSystemEqualityState.getFilesDifferences();
        assertEquals(1, result.size());
        assertTrue(result.containsKey("file1"));
        assertTrue(result.get("file1").get("snap1").equals("yes"));
        assertTrue(result.get("file1").get("snap2").equals("no"));
    }

	@Test
	public void testIdenticalSnapshotsWithNoFilesDifference() {
		fileSystemEqualityState.getDifferences().addAll(new ArrayList<>());

		Map<String, Map<String, String>> result = fileSystemEqualityState.getFilesDifferences();
		assertTrue(result.isEmpty());
	}

	@Test
	public void testNullSnapshots() {
		fileSystemEqualityState = new FileSystemEqualityState(null, null);

		Map<String, Map<String, String>> result = fileSystemEqualityState.getFilesDifferences();
		assertTrue(result.isEmpty());
	}

	@Test
    public void testMultipleFilesDifferencesInBothSnapshots() {
        when(fileTrace1.getFirstSnapshotDifferencies()).thenReturn(new HashMap<String, String>() {{ put("file1", "yes"); }});
        when(fileTrace1.getSecondSnapshotDifferencies()).thenReturn(new HashMap<String, String>() {{ put("file1", "no"); }});
        when(fileTrace1.getDifferenceType()).thenReturn(DifferenceType.FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY);

        when(fileTrace2.getFirstSnapshotDifferencies()).thenReturn(new HashMap<String, String>() {{ put("file2", "yes"); }});
        when(fileTrace2.getSecondSnapshotDifferencies()).thenReturn(new HashMap<String, String>() {{ put("file2", "no"); }});
        when(fileTrace2.getDifferenceType()).thenReturn(DifferenceType.FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY);

        fileSystemEqualityState.getDifferences().addAll(Arrays.asList(fileTrace1, fileTrace2));

        Map<String, Map<String, String>> result = fileSystemEqualityState.getFilesDifferences();
        assertEquals(2, result.size());
        assertTrue(result.containsKey("file1"));
        assertTrue(result.get("file1").get("snap1").equals("yes"));
        assertTrue(result.get("file1").get("snap2").equals("no"));
        assertTrue(result.containsKey("file2"));
        assertTrue(result.get("file2").get("snap1").equals("yes"));
        assertTrue(result.get("file2").get("snap2").equals("no"));
    }

}