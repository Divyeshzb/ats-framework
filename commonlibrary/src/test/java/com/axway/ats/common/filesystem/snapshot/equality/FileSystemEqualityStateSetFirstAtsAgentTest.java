/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=setFirstAtsAgent_cec9494d2e
ROOST_METHOD_SIG_HASH=setFirstAtsAgent_40271d1a25
"""
  Scenario 1: Valid agent name assignment
  Details:
    TestName: testValidAgentNameAssignment
    Description: The test is meant to check the assignment of the firstAtsAgent field with a valid string.
  Execution:
    Arrange: Create an instance of the class and a valid string for the firstAtsAgent field.
    Act: Call the setFirstAtsAgent method with the prepared string.
    Assert: Use JUnit assertions to check that the firstAtsAgent field is equal to the assigned string.
  Validation:
    The assertion aims to verify that the assignment was successful and the assigned string is the expected one in the firstAtsAgent field. The test validates the core functionality of the setFirstAtsAgent method.
  Scenario 2: Assignment with null value
  Details:
    TestName: testNullAgentNameAssignment
    Description: The test aims to assess the functioning of the setFirstAtsAgent method when null value is assigned as agent name.
  Execution:
    Arrange: Create an instance of the class.
    Act: Run the setFirstAtsAgent method assigning null value.
    Assert: Using JUnit assertions, verify if the firstAtsAgent field is null.
  Validation:
    The test checks if the method can handle null assignments and the firstAtsAgent field correctly reflects the null value.
  Scenario 3: Reassignment of agent name
  Details:
    TestName: testAgentNameReassignment
    Description: This test checks if the setFirstAtsAgent method correctly overwrites the existing value of the firstAtsAgent field with a new value.
  Execution:
    Arrange: Create an instance of the class and assign an initial value to the firstAtsAgent field.
    Act: Reassign a different value using the setFirstAtsAgent method.
    Assert: Apply JUnit assertions to check if the firstAtsAgent field now reflects the new value.
  Validation:
    The test verifies if the setFirstAtsAgent method can succesfully reassign a new value to the firstAtsAgent field, thus confirming its correct functionality.
  Scenario 4: Assignment with empty string
  Details:
    TestName: testEmptyStringAssignment
    Description: This test validates the behavior of the setFirstAtsAgent method when an empty string ("") is assigned as agent name.
  Execution:
    Arrange: Create an instance of the class.
    Act: Assign an empty string to the firstAtsAgent field using the setFirstAtsAgent method.
    Assert: Use JUnit assertions to verify the firstAtsAgent field is equal to the empty string.
  Validation:
    The test validates that the setFirstAtsAgent method can handle an empty string and the firstAtsAgent field accurately holds the assigned value.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem.snapshot.equality;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem.snapshot.equality")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.setFirstAtsAgent")
class FileSystemEqualityStateSetFirstAtsAgentTest {

	@Test
    @Tag('valid')
    public void testValidAgentNameAssignment() {
        String expectedName = "AtsTestAgent1";
        FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState("firstSnapshot", "secondSnapshot");
        fileSystemEqualityState.setFirstAtsAgent(expectedName);
        assertEquals(expectedName, fileSystemEqualityState.getFirstAtsAgent(), "The assigned agent name matches the expected value");
    }

	@Test
	@Tag
	('invalid')public void testNullAgentNameAssignment() {
		FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState("firstSnapshot",
				"secondSnapshot");
		fileSystemEqualityState.setFirstAtsAgent(null);
		assertNull(fileSystemEqualityState.getFirstAtsAgent(), "The assigned agent name is null as expected");
	}

	@Test
	@Tag
	('valid')public void testAgentNameReassignment() {
		String initialName = "AtsTestAgent1";
		String reAssignedName = "AtsTestAgent2";
		FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState("firstSnapshot",
				"secondSnapshot");
		fileSystemEqualityState.setFirstAtsAgent(initialName);
		fileSystemEqualityState.setFirstAtsAgent(reAssignedName);
		assertEquals(reAssignedName, fileSystemEqualityState.getFirstAtsAgent(),
				"The re-assigned agent name matches the expected value");
	}

	@Test
	@Tag
	('boundary')public void testEmptyStringAssignment() {
		String emptyName = "";
		FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState("firstSnapshot",
				"secondSnapshot");
		fileSystemEqualityState.setFirstAtsAgent(emptyName);
		assertEquals(emptyName, fileSystemEqualityState.getFirstAtsAgent(),
				"The assigned agent name matches the expected value , which is an empty string");
	}

}