/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getNetworkingTime_52aa1a7476
ROOST_METHOD_SIG_HASH=getNetworkingTime_6ee4c9e7b5

1. Scenario 1: Test to check the time spent in network communication

    Details:
    TestName: testGetNetworkingTime.
    Description: The test is designed to check the functionality of getNetworkingTime method. It is meant to validate if it correctly gives the time spent in network communication.

    Execution:
    Arrange: Instanciate NetworkingStopWatch object and step1_OpenConnectionForRequest, step2_OpenedConnectionForRequest and step3_StartSendingRequest methods need to be called sequentially.
    Act: Invoke getNetworkingTime method.
    Assert: Use JUnit assertions to check the spent time is same as the time returned by getNetworkingTime method.

    Validation:
    The assertion aims to verify that the time spent in the network communication is correctly returned by the getNetworkingTime method. It checks the robustness of the getNetworkingTime method.


2. Scenario 2: Test to check the time spent in network communication after resetting the context

    Details:
    TestName: testGetNetworkingTimeAfterReset.
    Description: This test is to check whether the getNetworkingTime method correctly gives timing information after resetting the context.

    Execution:
    Arrange: Instanciate NetworkingStopWatch object, call step1_OpenConnectionForRequest, step2_OpenedConnectionForRequest, step3_StartSendingRequest and step0_SetNewContext methods sequentially.
    Act: Invoke the getNetworkingTime method.
    Assert: Use JUnit assertions to verify that the time returned by getNetworkingTime equals the time since last reset.

    Validation:
    The assertion verifies whether the getNetworkingTime method works correctly after context has been reset. It validates if the getNetworkingTime method is sensitive to context resetting.


3. Scenario 3: Test getNetworkingTime when timer is suspended

    Details:
    TestName: testGetNetworkingTimeWhenSuspended.
    Description: This test is crafted to test if the getNetworkingTime method correctly returns the time spent in network communication when the timer is suspended.

    Execution:
    Arrange: Instanciate NetworkingStopWatch object and call step1_OpenConnectionForRequest, step2_OpenedConnectionForRequest methods sequentially.
    Act: Invoke getNetworkingTime method.
    Assert: Use JUnit assertions to verify that the time given by getNetworkingTime equals the time from network connection opened to suspended.

    Validation:
    This verification aims to ensure that the getNetworkingTime method correctly calculates the time even when the timer is suspended. It verifies if the method is robust against changes in timer status.
*/

// ********RoostGPT********

package com.axway.ats.common.agent.templateactions;

import org.apache.commons.lang3.time.StopWatch;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class NetworkingStopWatchGetNetworkingTimeTest {

	// Test case scenario 1
	@Tag("valid")
	@Test
	public void testGetNetworkingTime() {
		// Arrange
		NetworkingStopWatch nsw = new NetworkingStopWatch("testAction");
		nsw.step1_OpenConnectionForRequest();
		nsw.step2_OpenedConnectionForRequest();
		nsw.step3_StartSendingRequest();
		long expectedTime = nsw.getNetTimer().getTime();

		// Act
		long actualTime = nsw.getNetworkingTime();

		// Assert
		assertEquals(expectedTime, actualTime, "The network communication time is not as expected");
	}

	// Test case scenario 2
	@Tag("valid")
	@Test
	public void testGetNetworkingTimeAfterReset() {
		// Arrange
		NetworkingStopWatch nsw = new NetworkingStopWatch("testAction");
		nsw.step1_OpenConnectionForRequest();
		nsw.step2_OpenedConnectionForRequest();
		nsw.step3_StartSendingRequest();
		nsw.step0_SetNewContext("testAction");
		long expectedTime = nsw.getNetTimer().getTime();
		// Act
		long actualTime = nsw.getNetworkingTime();

		// Assert
		assertEquals(expectedTime, actualTime, "The network communication time after reset is not as expected");
	}

	// Test case scenario 3
	@Tag("valid")
	@Test
	public void testGetNetworkingTimeWhenSuspended() {
		// Arrange
		NetworkingStopWatch nsw = new NetworkingStopWatch("testAction");
		nsw.step1_OpenConnectionForRequest();
		nsw.step2_OpenedConnectionForRequest();
		long expectedTime = nsw.getNetTimer().getTime();
		// Act
		long actualTime = nsw.getNetworkingTime();

		// Assert
		assertEquals(expectedTime, actualTime, "The network communication time when suspended is not as expected");
	}

}