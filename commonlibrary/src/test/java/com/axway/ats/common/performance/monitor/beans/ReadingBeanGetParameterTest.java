/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getParameter_fa6d29172a
ROOST_METHOD_SIG_HASH=getParameter_69dd948fdc

Scenario 1: Test to Check the Method Return when Parameters Map is Not Null
Details:
  TestName: testGetParameterWhenParametersMapExists
  Description: The test is designed to verify the behavior of the getParameter method when parameters map is not null. This checks the normal operation of the method.
Execution:
  Arrange: Create an instance of ReadingBean and set parameters map with some data.
  Act: Invoke the getParameter method passing a key that exists in the parameters map.
  Assert: Expect to return the value associated with the passed key in the parameters map.
Validation:
  Verify if the method returns the value associated with the passed key when the parameters map is not null. The method should operate correctly under normal conditions.

Scenario 2: Test to Check the Method Return when the Parameter Key Does Not Exist
Details:
  TestName: testGetParameterWhenKeyDoesNotExists
  Description: The test is intended to examine how the getParameter method behaves when the parameter key does not exist in the parameters map. This tests for error handling within the method.
Execution:
  Arrange: Create an instance of ReadingBean and set the parameters map with some data.
  Act: Call the getParameter method passing a key that does not exist in the parameters map.
  Assert: Expect to return null.
Validation:
  Assert if the method returns null when the passed key doesn't exist in the parameters map. This verifies the error handling mechanism of the method when asked to retrieve a non-existent parameter.

Scenario 3: Test to Check the Method Return when Parameters Map is Null
Details:
  TestName: testGetParameterWhenParametersMapIsNull
  Description: This test checks how the getParameter method behaves when the parameters map is null. It assesses if the method can handle a null object.
Execution:
  Arrange: Create an instance of ReadingBean without setting the parameters map or set it as null.
  Act: Invoke the getParameter method with any key.
  Assert: Expect to return null.
Validation:
  Verify if the method returns null when the parameters map is null. This checks whether the method correctly handles a null object and protects against possible NullPointerExceptions.

Scenario 4: Test to Check the Method Return with an Empty String as Key
Details:
  TestName: testGetParameterWithEmptyStringAsKey
  Description: The test is designed to verify the behavior of the getParameter method when an empty string is passed as a key. It checks whether the method can handle edge cases.
Execution:
  Arrange: Create an instance of ReadingBean and set parameters map with some data including a key as an empty string.
  Act: Invoke getParameter method passing an empty string as the key.
  Assert: Expect to return the value associated with the empty string key in the parameters map.
Validation:
  Verify if the method returns the correct value when an empty string key is used. This checks how the method handles edge case inputs.
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;

public class ReadingBeanGetParameterTest {

	@Test
	@Tag("Valid")
	public void testGetParameterWhenParametersMapExists() {
		Map<String, String> parameters = new HashMap<>();
		parameters.put("key1", "value1");
		ReadingBean readingBean = new ReadingBean();
		readingBean.setParameters(parameters);

		String result = readingBean.getParameter("key1");

		assertNotNull(result);
		assertEquals("value1", result);
	}

	@Test
	@Tag("Invalid")
	public void testGetParameterWhenKeyDoesNotExists() {
		Map<String, String> parameters = new HashMap<>();
		parameters.put("key1", "value1");
		ReadingBean readingBean = new ReadingBean();
		readingBean.setParameters(parameters);

		String result = readingBean.getParameter("key2");

		assertNull(result);
	}

	@Test
	@Tag("Invalid")
	public void testGetParameterWhenParametersMapIsNull() {
		ReadingBean readingBean = new ReadingBean();

		String result = readingBean.getParameter("key1");

		assertNull(result);
	}

	@Test
	@Tag("Boundary")
	public void testGetParameterWithEmptyStringAsKey() {
		Map<String, String> parameters = new HashMap<>();
		parameters.put("", "value1");
		ReadingBean readingBean = new ReadingBean();
		readingBean.setParameters(parameters);

		String result = readingBean.getParameter("");

		assertNotNull(result);
		assertEquals("value1", result);
	}

}