/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=poll_f9f017a341
ROOST_METHOD_SIG_HASH=poll_92315c0a3a

"""
Scenario 1: Test To Check That Method poll Returns The Current Value In Float Form
  Details:
    TestName: testPollReturnsCurrentValueInFloat
    Description: This test aims to ensure that the `poll()` method is correctly converting and returning the current value in float form from the 'ParentProcessReadingBean'. This test validates the basic functionality of the poll method.
  Execution:
    Arrange: Instantiate a 'ParentProcessReadingBean' object and set the 'currentValue' field to a known value directly or by using `addValue(float newValue)`.
    Act: Invoke the `poll()` method on the 'ParentProcessReadingBean' instance.
    Assert: Use JUnit assertions to compare the returned result against the known float value.
  Validation:
    This test validates that the `poll()` function is able to correctly retrieve and return the 'currentValue' in the correct format. The expected result is that 'currentValue' is identical to the known float value initially set.


Scenario 2: Test To Check The Accuracy Of poll Method When The CurrentValue Is Zero
  Details:
    TestName: testPollReturnsZeroForEmptyCurrentValue
    Description: This test checks to ensure that the poll method is correctly handling and returning zero when the currentValue is not set or reset.
  Execution:
    Arrange: Instantiate a 'ParentProcessReadingBean' object and leave the 'currentValue' undefined or use `resetValue()`.
    Act: Invoke the `poll()` method on the 'ParentProcessReadingBean' instance.
    Assert: Assert that the returned value matches float value '0.0'.
  Validation:
    Validating whether the poll method is handling and retrieving the default/empty 'currentValue' accurately. The expected result is that the 'currentValue' retrieved by the poll method should be zero (0.0).


Scenario 3: Check If The Poll Method Works Accurately After value Reset
  Details:
    TestName: testPollAfterReset
    Description: This test validates that the poll method returns zero after resetting the value using the `resetValue` method.
  Execution:
    Arrange: Create a 'ParentProcessReadingBean' object, set a known float value then reset the 'currentValue' using `resetValue()`.
    Act: Call the `poll()` method on the 'ParentProcessReadingBean' instance.
    Assert: Assert that the returned value is '0.0'.
  Validation:
    This test confirms that the poll method correctly interprets and retrieves the 'currentValue' as zero (0.0) after the `resetValue()` method has been called.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;

public class ParentProcessReadingBeanPollTest {

	@Test
	@Tag("valid")
	void testPollReturnsCurrentValueInFloat() {
		// Arrange
		ParentProcessReadingBean parentProcessReadingBean = new ParentProcessReadingBean();
		parentProcessReadingBean.addValue(5.0f);

		// Act
		float result = parentProcessReadingBean.poll();
		// Assert
		assertEquals(5.0f, result, "The current value should be 5.0");
	}

	@Test
	@Tag("valid")
	void testPollReturnsZeroForEmptyCurrentValue() {
		// Arrange
		ParentProcessReadingBean parentProcessReadingBean = new ParentProcessReadingBean();
		// Act
		float result = parentProcessReadingBean.poll();
		// Assert
		assertEquals(0.0f, result, "The current value should be 0.0");
	}

	@Test
	@Tag("valid")
	void testPollAfterReset() {
		// Arrange
		ParentProcessReadingBean parentProcessReadingBean = new ParentProcessReadingBean();
		parentProcessReadingBean.addValue(5.0f);
		parentProcessReadingBean.resetValue();
		// Act
		float result = parentProcessReadingBean.poll();
		// Assert
		assertEquals(0.0f, result, "The current value should be 0.0");
	}

}