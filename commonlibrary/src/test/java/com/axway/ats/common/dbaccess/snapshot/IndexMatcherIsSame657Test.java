/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=isSame_fafe933ef9
ROOST_METHOD_SIG_HASH=isSame_fafe933ef9

"""
  Scenario 1: Test Case for Both Properties Having Same Properties
  Details:
    TestName: testBothPropertiesHavingSameProperties
    Description: This test will check if the 'isSame' method returns 'True' when both properties have the exact same properties.
  Execution:
    Arrange: Initialize two Properties objects with the same properties.
    Act: Call the 'isSame' method with the same properties for both objects.
    Assert: Assert that the method returns 'True'.
  Validation:
    This assertion verifies that the 'isSame' method can correctly recognize when the two properties are identical, thus returning 'True'.

  Scenario 2: Test Case for Both Properties Having Different Properties
  Details:
    TestName: testBothPropertiesHavingDifferentProperties
    Description: This test will check if the 'isSame' method returns 'False' when both properties have different properties.
  Execution:
    Arrange: Initialize two Properties objects with different properties.
    Act: Call the 'isSame' method with the different properties for both objects.
    Assert: Assert that the method returns 'False'.
  Validation:
    This assertion verifies that the 'isSame' method can correctly recognize when the two properties are not identical, thus returning 'False'.

  Scenario 3: Test Case for Null Properties
  Details:
    TestName: testNullProperties
    Description: This test will check if the 'isSame' method handles 'null' input properly and raises an exception.
  Execution:
    Arrange: Set both properties to 'null'.
    Act: Call the 'isSame' method with null properties.
    Assert: Assert that an IllegalArgumentException, NullPointerException or appropriate exception is raised.
  Validation:
    The test case verifies that the 'isSame' method throws an exception when null values are provided, highlighting robust error handling.

  Scenario 4: Test Case for One Property Being Null
  Details:
    TestName: testOneNullProperty
    Description: This test will check if the 'isSame' method handles scenarios where one property is null
  Execution:
    Arrange: Set one property to a valid object and the other to 'null'.
    Act: Call the 'isSame' method with one null property.
    Assert: Assert that an IllegalArgumentException, NullPointerException or appropriate exception is raised.
  Validation:
    The test case verifies that the 'isSame' method throws an exception when one of the properties is null, proving effective error handling.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.dbaccess.snapshot;

import java.util.Properties;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class IndexMatcherIsSame657Test {

	@Test
	@Tag("valid")
	public void testBothPropertiesHavingSameProperties() {
		IndexMatcher indexMatcher = new IndexMatcher();
		Properties propOne = new Properties();
		propOne.setProperty("p1", "v1");
		propOne.setProperty("p2", "v2");

		Properties propTwo = new Properties();
		propTwo.setProperty("p1", "v1");
		propTwo.setProperty("p2", "v2");

		boolean result = indexMatcher.isSame("TestTable", propOne, propTwo);
		assertTrue(result);
	}

	@Test
	@Tag("valid")
	public void testBothPropertiesHavingDifferentProperties() {
		IndexMatcher indexMatcher = new IndexMatcher();
		Properties propOne = new Properties();
		propOne.setProperty("p1", "v1");
		propOne.setProperty("p2", "v2");

		Properties propTwo = new Properties();
		propTwo.setProperty("p1", "value1");
		propTwo.setProperty("p2", "value2");

		boolean result = indexMatcher.isSame("TestTable", propOne, propTwo);
		assertFalse(result);
	}

	@Test
	@Tag("invalid")
	public void testNullProperties() {
		IndexMatcher indexMatcher = new IndexMatcher();
		assertThrows(IllegalArgumentException.class, () -> {
			indexMatcher.isSame("TestTable", null, null);
		});
	}

	@Test
	@Tag("invalid")
	public void testOneNullProperty() {
		IndexMatcher indexMatcher = new IndexMatcher();
		Properties validProp = new Properties();
		validProp.setProperty("p1", "value1");
		validProp.setProperty("p2", "value2");

		assertThrows(IllegalArgumentException.class, () -> {
			indexMatcher.isSame("TestTable", validProp, null);
		});
		assertThrows(IllegalArgumentException.class, () -> {
			indexMatcher.isSame("TestTable", null, validProp);
		});
	}

}