/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getDifferentPrimaryKeys_c61c60d5b3
ROOST_METHOD_SIG_HASH=getDifferentPrimaryKeys_8a63671e93
"""
Scenario 1: Test when snapshot and table data is available and primary key is present
Details:
    TestName: testPrimaryKeyAvailable.
    Description: This scenario is meant to test when the snapshot and table data are available and the primary key exists.
  Execution:
    Arrange: Initialize the 'differentPrimaryKeys' hashmap with snapshot as the key, and another Map value where table name is the key to a primary key.
    Act: Invoke the getDifferentPrimaryKeys() method using the initialised snapshot and table name.
    Assert: Use JUnit's assertEquals() to compare the returned value from getDifferentPrimaryKeys() with the expected primary key value.
  Validation:
    The assertion verifies whether the method returns the correct primary key for given snapshot and table name. This is crucial for correct data references and manipulations and plays a critical role in data centric applications.
Scenario 2: Test when snapshot data is available, but there is no primary key associated to the table
Details:
    TestName: testPrimaryKeyNotAvailable.
    Description: This scenario aims to test the condition where snapshot data is there but no primary key is associated to the given table name.
  Execution:
    Arrange: Initialize the 'differentPrimaryKeys' hashmap with snapshot as the key, and another Map as value so that there is no key corresponding to the table name.
    Act: Invoke the getDifferentPrimaryKeys() method using the initialised snapshot and table name.
    Assert: Use JUnit's assertEquals() to compare the returned value from getDifferentPrimaryKeys() with an empty String.
  Validation:
    The test verifies if the method was able to handle the case where no key is available for a table and should return an empty string according to the method definition.
Scenario 3: Test when snapshot data itself is not available
Details:
    TestName: testSnapshotNotAvailable.
    Description: This scenario is meant to test the condition where the snapshot data itself is not present in 'differentPrimaryKeys' map.
  Execution:
    Arrange: Initialize an empty 'differentPrimaryKeys' hashmap.
    Act: Invoke the getDifferentPrimaryKeys() method using a snapshot and table name that aren't keys in the map.
    Assert: Use JUnit's assertEquals() to assert that getDifferentPrimaryKeys() returned an empty string.
  Validation:
    The test verifies if the method correctly handles the case of missing snapshot data by returning an empty string, as declared in the method definition.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.dbaccess.snapshot.equality;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.dbaccess.snapshot.equality")
@Tag("com.axway.ats.common.dbaccess.snapshot.equality.getDifferentPrimaryKeys")
public class DatabaseEqualityStateGetDifferentPrimaryKeysTest {

	private String firstSnapshotName;

	private String secondSnapshotName;

	private Map<String, List<String>> tablePresentInOneSnapshotOnly = new TreeMap<>();

	private Map<String, Map<String, String>> differentPrimaryKeys = new TreeMap<>();

	private Map<String, Map<String, Integer>> differentNumberOfRows = new TreeMap<>();

	private Map<String, Map<String, List<String>>> rowPresentInOneSnapshotOnly = new TreeMap<>();

	private Map<String, Map<String, List<String>>> columnPresentInOneSnapshotOnly = new TreeMap<>();

	private Map<String, Map<String, List<String>>> indexPresentInOneSnapshotOnly = new TreeMap<>();

	@Tag("valid")
	@Test
	public void testPrimaryKeyAvailable() {
		DatabaseEqualityState des = new DatabaseEqualityState("snapshot1", "snapshot2");
		Map<String, String> primaryKeyMap = new HashMap<>();
		primaryKeyMap.put("table1", "primaryKey1");
		des.differentPrimaryKeys.put("snapshot1", primaryKeyMap);
		assertEquals("primaryKey1", des.getDifferentPrimaryKeys("snapshot1", "table1"));
	}

	@Tag("invalid")
	@Test
	public void testPrimaryKeyNotAvailable() {
		DatabaseEqualityState des = new DatabaseEqualityState("snapshot1", "snapshot2");
		Map<String, String> primaryKeyMap = new HashMap<>();
		primaryKeyMap.put("table1", null);
		des.differentPrimaryKeys.put("snapshot1", primaryKeyMap);
		assertEquals("", des.getDifferentPrimaryKeys("snapshot1", "table1"));
	}

	@Tag("boundary")
	@Test
	public void testSnapshotNotAvailable() {
		DatabaseEqualityState des = new DatabaseEqualityState("snapshot1", "snapshot2");
		assertEquals("", des.getDifferentPrimaryKeys("snapshot3", "table1"));
	}

}