/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getFileExtension_1c66710851
ROOST_METHOD_SIG_HASH=getFileExtension_e3a06c6394

"""
Scenario 1: Test to check if valid ContentType returns correct FileExtension
Details:
  TestName: validContentTypeReturnsCorrectFileExtension
  Description: Test to validate that the getFileExtension method returns the correct file extension for a correctly formatted content type.
Execution:
  Arrange: Set up a well-formatted content type as an input parameter.
  Act: Call the getFileExtension method with the content type as the parameter.
  Assert: Check if the returned file extension matches the expected file extension.
Validation:
  If the content type was valid and the properties file had a related mapping, the method should return the correct file extension. This is significant for correctly mapping mime types to their respective file extensions.

Scenario 2: Test to check if null ContentType returns null
Details:
  TestName: nullContentTypeReturnsNull
  Description: Test to validate when the contentType passed to getFileExtension is null, it returns null.
Execution:
  Arrange: Set up a null content type as an input parameter.
  Act: Call the getFileExtension method with the null content type as the parameter.
  Assert: Check if the returned file extension is null.
Validation:
  For a null content type, the method should return null. This signifies how the method handles scenarios where the content type is not provided.

Scenario 3: Test to check if ContentType with additional characters after semicolon is handled correctly
Details:
  TestName: contentTypeWithAdditionalCharactersReturnsCorrectFileExtension
  Description: Test to ensure that the getFileExtension method handles content types with ';' character and additional text after it correctly.
Execution:
  Arrange: Set up a content type with additional characters after ';' as an input parameter.
  Act: Call the getFileExtension method with the modified content type as the parameter.
  Assert: Check if the returned file extension matches the expected file extension.
Validation:
  The getFileExtension method should correctly handle content types with additional characters after ';' and return the correct file extension. This tests the method's ability to handle different variations of content types.

Scenario 4: Test to check if non-mapping ContentType returns null
Details:
  TestName: nonMappingContentTypeReturnsNull
  Description: Test to ensure that the getFileExtension method returns null for a contentType that isn't mapped in the properties file.
Execution:
  Arrange: Set up a non-mapping content type as an input parameter.
  Act: Call the getFileExtension method with the non-mapping content type as the parameter.
  Assert: Check if the returned file extension is null.
Validation:
  The getFileExtension method should return null for content types that are not mapped in the properties file. This helps to verify the method's handling of non-mapping content types.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.io;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.Properties;
import org.apache.log4j.Logger;

public class MimeTypeFileExtensionMapperGetFileExtensionTest {

	@Test
    @Tag('valid')
    public void validContentTypeReturnsCorrectFileExtension(){
        String contentType = "application/json";
        String expectedFileExtension = "json";
        String actualFileExtension = MimeTypeFileExtensionMapper.getFileExtension(contentType);
        assertEquals(expectedFileExtension, actualFileExtension, "Expected file extension does not match actual file extension");
    }

	@Test
	@Tag
	('invalid')public void nullContentTypeReturnsNull() {
		String contentType = null;
		String actualFileExtension = MimeTypeFileExtensionMapper.getFileExtension(contentType);
		assertNull(actualFileExtension, "File extension for null content type should be null");
	}

	@Test
	@Tag
	('valid')public void contentTypeWithAdditionalCharactersReturnsCorrectFileExtension() {
		String contentType = "text/html; charset=UTF-8";
		String expectedFileExtension = "html";
		String actualFileExtension = MimeTypeFileExtensionMapper.getFileExtension(contentType);

		assertEquals(expectedFileExtension, actualFileExtension,
				"Expected file extension does not match actual file extension");
	}

	@Test
	@Tag
	('invalid')public void nonMappingContentTypeReturnsNull() {
		String contentType = "non-existing/content-type";
		String actualFileExtension = MimeTypeFileExtensionMapper.getFileExtension(contentType);
		assertNull(actualFileExtension, "File extension for non-mapping content type should be null");
	}

}