/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addIndexPresentInOneSnapshotOnly_6e788bf9d1
ROOST_METHOD_SIG_HASH=addIndexPresentInOneSnapshotOnly_74187a15ad
"""
Scenario 1: Test to add index successfully when table is present in snapshot
Details:
  TestName: testAddIndexWhenTableExists
  Description: This test checks that the index is added correctly into the index list of a table that exists in the given snapshot.
Execution:
  Arrange: Create a snapshot with a table data.
  Act: Call the 'addIndexPresentInOneSnapshotOnly' method with the snapshot name, table name, index name, and index.
  Assert: Check if tablesPerSnapshot contains the table and check if indexesPerTable has been updated to include the new index.
Validation:
  The test validates that the method correctly handles the case where the table is already present in the snapshot and updates the index list as necessary. This is important as it ensures index information is stored accurately.
Scenario 2: Test to add index successfully when table is not present in the snapshot
Details:
  TestName: testAddIndexWhenTableNotExists
  Description: This test checks that the index is added correctly into a new table in the given snapshot.
Execution:
  Arrange: Create a snapshot without a table data
  Act: Call the 'addIndexPresentInOneSnapshotOnly' method with the snapshot name, table name, index name, and index
  Assert: Check if tablesPerSnapshot contains the new table and check if indexesPerTable has been updated to include the new index.
Validation:
  The test validates that the method correctly handles the case where the table is not already present in the snapshot and it adds the new index to the new table. Ensuring correct handling in this scenario is critical for maintaining accurate index information.
Scenario 3: Test to check if the index is being appended correctly
Details:
  TestName: testAppendIndex
  Description: This test checks that the current index is being appended to the existing indexes for the given table.
Execution:
  Arrange: Create a snapshot with a table and some indexes
  Act: Call the 'addIndexPresentInOneSnapshotOnly' method with the snapshot name, table name, index name, and index
  Assert: Check if the new index has been appended to the existing index list for the table.
Validation:
  The test validates that the method handles multiple indexes for a table correctly and ensures that new indexes are appended without overwriting existing data.
Scenario 4: Test to validate handling when snapshot is not available
Details:
  TestName: testSnapshotNotAvailable
  Description: This test checks that the method can handle the situation when the given snapshot is not available.
Execution:
  Arrange: No snapshot is initialized
  Act: Call the 'addIndexPresentInOneSnapshotOnly' method with the snapshot name, table name, index name, and index
  Assert: Check if a snapshot is created and to see if the table with the index is added correctly
Validation:
  The test validates the method's ability to handle scenarios where the given snapshot is not present and ensures that it can successfully add tables and indexes to new snapshots.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.dbaccess.snapshot.equality;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.dbaccess.snapshot.equality")
@Tag("com.axway.ats.common.dbaccess.snapshot.equality.addIndexPresentInOneSnapshotOnly")
public class DatabaseEqualityStateAddIndexPresentInOneSnapshotOnlyTest {

	private DatabaseEqualityState databaseEqualityState;

	private static final String FIRST_SNAPSHOT = "firstSnapshot";

	private static final String SECOND_SNAPSHOT = "secondSnapshot";

	private static final String TABLE_NAME = "tableName";

	private static final String INDEX_NAME = "indexName";

	private static final String INDEX = "index";

	@BeforeEach
	public void setup() {
		databaseEqualityState = new DatabaseEqualityState(FIRST_SNAPSHOT, SECOND_SNAPSHOT);
	}

	@Test
	@Tag("valid")
	public void testAddIndexWhenTableExists() {
		databaseEqualityState.addIndexPresentInOneSnapshotOnly(FIRST_SNAPSHOT, TABLE_NAME, INDEX_NAME, INDEX);
		Map<String, List<String>> result = databaseEqualityState.indexPresentInOneSnapshotOnly.get(FIRST_SNAPSHOT);
		assertNotNull(result);
		List<String> indexes = result.get(TABLE_NAME);
		assertNotNull(indexes);
		assertTrue(indexes.contains(INDEX_NAME + ", " + INDEX));
	}

	@Test
	@Tag("valid")
	public void testAddIndexWhenTableNotExists() {
		databaseEqualityState.addIndexPresentInOneSnapshotOnly(SECOND_SNAPSHOT, TABLE_NAME, INDEX_NAME, INDEX);
		Map<String, List<String>> result = databaseEqualityState.indexPresentInOneSnapshotOnly.get(SECOND_SNAPSHOT);
		assertNotNull(result);
		List<String> indexes = result.get(TABLE_NAME);
		assertNotNull(indexes);
		assertTrue(indexes.contains(INDEX_NAME + ", " + INDEX));
	}

	@Test
	@Tag("valid")
	public void testAppendIndex() {
		databaseEqualityState.addIndexPresentInOneSnapshotOnly(FIRST_SNAPSHOT, TABLE_NAME, "index1", INDEX);
		databaseEqualityState.addIndexPresentInOneSnapshotOnly(FIRST_SNAPSHOT, TABLE_NAME, INDEX_NAME, INDEX);
		Map<String, List<String>> result = databaseEqualityState.indexPresentInOneSnapshotOnly.get(FIRST_SNAPSHOT);
		assertNotNull(result);
		List<String> indexes = result.get(TABLE_NAME);
		assertNotNull(indexes);
		assertEquals(2, indexes.size());
		assertTrue(indexes.contains(INDEX_NAME + ", " + INDEX));
		assertTrue(indexes.contains("index1, " + INDEX));
	}

	@Test
	@Tag("valid")
	public void testSnapshotNotAvailable() {
		databaseEqualityState.addIndexPresentInOneSnapshotOnly("snapshot3", TABLE_NAME, INDEX_NAME, INDEX);
		Map<String, List<String>> result = databaseEqualityState.indexPresentInOneSnapshotOnly.get("snapshot3");
		assertNotNull(result);
		List<String> indexes = result.get(TABLE_NAME);
		assertNotNull(indexes);
		assertTrue(indexes.contains(INDEX_NAME + ", " + INDEX));
	}

}