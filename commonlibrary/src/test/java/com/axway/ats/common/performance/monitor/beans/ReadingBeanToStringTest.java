/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=toString_3cff0cfa66
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
Scenario 1: Validate toString Method with Non-null Values

Details:
  TestName: validateToStringOutputWithNonNullValues
  Description: This scenario is intended to validate the output of the toString method when the 'id' and 'values' fields are populated with non-null values.

Execution:
  Arrange: Instantiate ReadingBean and set 'id' to 1 and 'value' to "TestValue" using the provided methods.
  Act: Invoke the toString method.
  Assert: Assert that the resulting string equals "'1' with value 'TestValue'".

Validation:
  This asserts that toString correctly constructs a string representation of the ReadingBean object. The expected result ensures that the format of the concatenated string is as required.

Scenario 2: Validate toString Method with Null 'value' Field

Details:
  TestName: validateToStringWithNullValueField
  Description: This test is aimed at validating the output of the toString method when the 'value' field is null while 'id' is not.

Execution:
  Arrange: Instantiate ReadingBean and set 'id' to 2 and leave 'value' as null.
  Act: Invoke the toString method.
  Assert: Assert that the resulting string equals "'2' with value 'null'".

Validation:
  This test verifies how toString copes with a null 'value'. The expected result reflects that null is simply altered to 'null' string in the output.

Scenario 3: Validate toString Method with Negative Values for 'id'

Details:
  TestName: validateToStringWithNegativeId
  Description: This test aims to check the output of toString when 'id' is a negative value.

Execution:
  Arrange: Instantiate ReadingBean and set 'id' to -1 and 'value' with some non-null value.
  Act: Invoke the toString method.
  Assert: Assert that the resulting string equals "'-1' with value 'TestValue'".

Validation:
  This test is designed to double-check how toString handles negative 'id' values. The expected result displays that negative 'id' values still result in a concatenated string, confirming that negative 'id' values are correctly handled.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import com.axway.ats.common.PublicAtsApi;

public class ReadingBeanToStringTest {

	@Test
	@Tag("valid")
	public void validateToStringOutputWithNonNullValues() {
		// Arrange
		ReadingBean readingBean = new ReadingBean();
		readingBean.setId(1);
		readingBean.setValue("TestValue");
		// Act
		String actualOutput = readingBean.toString();
		// Assert
		String expectedOutput = "'1' with value 'TestValue'";
		assertEquals(expectedOutput, actualOutput);
	}

	@Test
	@Tag("valid")
	public void validateToStringWithNullValueField() {
		// Arrange
		ReadingBean readingBean = new ReadingBean();
		readingBean.setId(2);
		readingBean.setValue(null);
		// Act
		String actualOutput = readingBean.toString();
		// Assert
		String expectedOutput = "'2' with value 'null'";
		assertEquals(expectedOutput, actualOutput);
	}

	@Test
	@Tag("boundary")
	public void validateToStringWithNegativeId() {
		// Arrange
		ReadingBean readingBean = new ReadingBean();
		readingBean.setId(-1);
		readingBean.setValue("TestValue");
		// Act
		String actualOutput = readingBean.toString();
		// Assert
		String expectedOutput = "'-1' with value 'TestValue'";
		assertEquals(expectedOutput, actualOutput);
	}

}