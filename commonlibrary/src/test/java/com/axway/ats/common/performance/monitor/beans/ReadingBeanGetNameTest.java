/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getName_76141fefb0
ROOST_METHOD_SIG_HASH=getName_5e794ac6f3

Scenario 1: Test to verify correct name is returned

Details:
  TestName: verifyGetName
  Description: This test is meant to check if the correct name is returned by the getName() method when called after a name has been set using the setName(String name) method.
Execution:
  Arrange: Create a ReadingBean object and set a name using the setName() method.
  Act: Invoke the getName() method.
  Assert: Use JUnit assertions to compare the returned name against the name that was set.
Validation:
  The assertion aims to verify that the getName() method correctly returns the name that was previously set. This is significant in ensuring the object behaves correctly when retrieving the name, which forms part of the core functionality of the ReadingBean class.

Scenario 2: Test to verify null is returned when no name is set

Details:
  TestName: verifyNullForNoNameSet
  Description: This test is meant to check if the getName() method returns null when no name has been set. This represents the un-initialized state of the ReadingBean object.
Execution:
  Arrange: Create a ReadingBean object without setting a name.
  Act: Invoke the getName() method.
  Assert: Use JUnit assertions to assert that null is returned.
Validation:
  The assertion aims to verify that the getName() method returns null if no name has been set. This is a sensible and expected behavior in the case where the object is not yet fully initialized.

Scenario 3: Test to verify correct name is returned after multiple name changes

Details:
  TestName: verifyNameAfterChange
  Description: This scenario is to test if the getName() method correctly reflects changes after multiple invocations of setName(String name) method.
Execution:
  Arrange: Create a ReadingBean object and set the name multiple times using the setName() method.
  Act: Invoke the getName() method.
  Assert: Use JUnit assertions to compare the returned name against the last name set.
Validation:
  The assertion aims to verify that.GetName() method always reflects the most recent name set. This is significant in ensuring that the ReadingBean object state remains consistent and responsive to changes.
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import com.axway.ats.common.PublicAtsApi;

public class ReadingBeanGetNameTest {

	@Test
	@Tag("valid")
	public void verifyGetName() {
		// Arrange
		ReadingBean readingBean = new ReadingBean();
		String expectedName = "Test Name";
		readingBean.setName(expectedName);
		// Act
		String actualName = readingBean.getName();
		// Assert
		assertEquals(expectedName, actualName, "Returned name does not match the set name");
	}

	@Test
	@Tag("valid")
	public void verifyNullForNoNameSet() {
		// Arrange
		ReadingBean readingBean = new ReadingBean();
		// Act
		String actualName = readingBean.getName();
		// Assert
		assertNull(actualName, "Null expected when no name has been set");
	}

	@Test
	@Tag("valid")
	public void verifyNameAfterChange() {
		// Arrange
		ReadingBean readingBean = new ReadingBean();
		String oldName = "Old Test Name";
		String expectedName = "New Test Name";
		readingBean.setName(oldName);
		readingBean.setName(expectedName);
		// Act
		String actualName = readingBean.getName();
		// Assert
		assertEquals(expectedName, actualName, "Returned name must match the last set name");
	}

}