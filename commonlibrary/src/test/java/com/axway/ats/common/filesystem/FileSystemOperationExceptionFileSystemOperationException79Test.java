// ********RoostGPT********
/*
Test generated by RoostGPT for test axay-unit-dm using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=FileSystemOperationException_55c4870c5b
ROOST_METHOD_SIG_HASH=FileSystemOperationException_847404d8db
Scenario 1: Check whether FileSystemOperationException is thrown when a NullPointerException occurs
Details:
  TestName: testFilesystemOperationWhenNullExceptionOccurs
  Description: This test is meant to check whether the FileSystemOperationException is being correctly thrown when a NullPointerException occurs.
Execution:
  Arrange: Set up the occurrence of a NullPointerException.
  Act: Invoke the target method, FileSystemOperationException, with the NullPointerException as parameter.
  Assert: Use JUnit assertions to verify that a FileSystemOperationException is thrown.
Validation:
  The assertion aims to confirm that a FileSystemOperationException is thrown when a NullPointerException occurs. This is as per the business logic design where a FileSystemOperationException should be thrown whenever an exception occurs.
Scenario 2: Validate that FileSystemOperationException is being thrown when an arbitrary exception occurs
Details:
  TestName: testFileSystemOperationExceptionWhenArbitraryExceptionOccurs
  Description: This test is meant to check whether the FileSystemOperationException is being correctly thrown when an arbitrary exception occurs.
Execution:
  Arrange: Generate an arbitrary exception.
  Act: Invoke the target method, FileSystemOperationException, with the arbitrary exception as parameter.
  Assert: Use JUnit assertions to verify that a FileSystemOperationException is thrown.
Validation:
  The test is designed to ascertain the proper functioning of the FileSystemOperationException when an arbitrary exception occurs ensuring that the implementation of the method is solid.
Scenario 3: Validate that FileSystemOperationException contains the correct cause
Details:
  TestName: testFileSystemOperationExceptionForCorrectCause
  Description: This test is meant to check if the FileSystemOperationException contains the correct cause of exception, when thrown.
Execution:
  Arrange: Generate a specific exception.
  Act: Invoke the target method, FileSystemOperationException, with the specific exception as a parameter.
  Assert: Use JUnit assertions to verify that the FileSystemOperationException thrown has the correct original cause.
Validation:
  The test confirms that the FileSystemOperationException is able to accurately reflect the original cause of exception, a crucial part of error handling and debugging. This situation fits within application's design where each exception is wrapped into a FileSystemOperationException while preserving the original cause.
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.io.IOException;
import java.lang.NullPointerException;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.FileSystemOperationException")
public class FileSystemOperationExceptionFileSystemOperationException79Test {

	private static final long serialVersionUID = 6354018478615561666L;

	@Test
	public void testFilesystemOperationWhenNullExceptionOccurs() {
		NullPointerException nullPointerException = new NullPointerException();
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(
				nullPointerException);
		Assertions.assertThrows(NullPointerException.class, () -> {
			throw fileSystemOperationException.getCause();
		});
	}

	@Test
	public void testFileSystemOperationExceptionWhenArbitraryExceptionOccurs() {
		IOException ioException = new IOException();
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(ioException);
		Assertions.assertThrows(IOException.class, () -> {
			throw fileSystemOperationException.getCause();
		});
	}

	@Test
	public void testFileSystemOperationExceptionForCorrectCause() {
		IllegalArgumentException illegalArgumentException = new IllegalArgumentException();
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(
				illegalArgumentException);
		Assertions.assertTrue(fileSystemOperationException.getCause() instanceof IllegalArgumentException);
	}

}