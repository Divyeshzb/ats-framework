/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=FileSystemOperationException_ee13150cfd
ROOST_METHOD_SIG_HASH=FileSystemOperationException_60e5457309
"""
 Scenario 1: Valid Exception with Non-null Message
  Details:
    TestName: testFileSystemOperationExceptionWithNonNullMessageAndException.
    Description: This test is to validate the FileSystemOperationException constructor when given a message and an exception object.
  Execution:
    Arrange: Create an instance of String with a non-null value as the error message. Create an instance of Exception.
    Act: Invoke the FileSystemOperationException constructor with the created message and exception.
    Assert: Check if the exception object is successfully created.
  Validation:
    Our assertion aims to verify whether the object of FileSystemOperationException is created accurately. The test is significant in the context of correct exception handling in the application.
 Scenario 2: Null Exception with Non-null Message
  Details:
    TestName: testFileSystemOperationExceptionWithNullException.
    Description: This test validates the FileSystemOperationException constructor when given a message and a null exception object.
  Execution:
    Arrange: Create an instance of String with a non-null value as the error message. Do not create an instance of Exception.
    Act: Invoke the FileSystemOperationException constructor with the created message and null exception.
    Assert: Check if the exception object is successfully created.
  Validation:
    Our assertion aims to verify whether the message is being correctly assigned while the Exception object is null in the constructor of FileSystemOperationException. This test is significant in handling cases when there is no exception object available.
 Scenario 3: Valid Exception with Null Message
  Details:
    TestName: testFileSystemOperationExceptionWithNullExceptionMessage.
    Description: This test validates the FileSystemOperationException constructor when given a null message and a valid exception object.
  Execution:
    Arrange: Create an null value as the error message. Create an instance of Exception.
    Act: Invoke the FileSystemOperationException constructor with null message and valid exception.
    Assert: Check if the exception object is successfully created.
  Validation:
    Our assertion aims to verify whether the Exception object is being correctly assigned while the message is null in the constructor of FileSystemOperationException. This demonstrates the robustness of the application in handling cases when there is no message available.
 Scenario 4: Null Exception and Null Message
  Details:
    TestName: testFileSystemOperationExceptionWithNullExceptionAndNullMessage.
    Description: This test validates the FileSystemOperationException constructor when given a null message and a null exception object.
  Execution:
    Arrange: Do not create an instance of String as the error message and Exception.
    Act: Invoke the FileSystemOperationException constructor with null message and null exception.
    Assert: Check if the exception object is successfully created.
  Validation:
    Our assertion aims to verify whether the FileSystemOperationException object is being correctly created when both the message and exception are null. This scenario is essential in identifying how the application behaves in cases of minimum details availability.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import java.io.IOException;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.FileSystemOperationException")
@PublicAtsApi
public class FileSystemOperationException231Test {

	@BeforeEach
	void setUp() {
		// TODO: Add setUp logic if required.
	}

	@Test
	@Tag("valid")
	public void testFileSystemOperationExceptionWithNonNullMessageAndException() {
		String errorMessage = "Test Error Message";
		Exception e = new IOException();
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(errorMessage, e);
		assertNotNull(fileSystemOperationException);
		assertEquals(errorMessage, fileSystemOperationException.getMessage());
		assertEquals(e, fileSystemOperationException.getCause());
	}

	@Test
	@Tag("boundary")
	public void testFileSystemOperationExceptionWithNullException() {
		String errorMessage = "Test Error Message";
		Exception e = null;
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(errorMessage, e);
		assertNotNull(fileSystemOperationException);
		assertEquals(errorMessage, fileSystemOperationException.getMessage());
		assertNull(fileSystemOperationException.getCause());
	}

	@Test
	@Tag("boundary")
	public void testFileSystemOperationExceptionWithNullExceptionMessage() {
		String errorMessage = null;
		Exception e = new IOException();
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(errorMessage, e);
		assertNotNull(fileSystemOperationException);
		assertNull(fileSystemOperationException.getMessage());
		assertEquals(e, fileSystemOperationException.getCause());
	}

	@Test
	@Tag("invalid")
	public void testFileSystemOperationExceptionWithNullExceptionAndNullMessage() {
		String errorMessage = null;
		Exception e = null;
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(errorMessage, e);
		assertNotNull(fileSystemOperationException);
		assertNull(fileSystemOperationException.getMessage());
		assertNull(fileSystemOperationException.getCause());
	}

}