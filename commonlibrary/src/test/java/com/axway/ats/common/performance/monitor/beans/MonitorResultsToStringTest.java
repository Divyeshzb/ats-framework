/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=toString_b58aad3ef4
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
  Scenario 1: Testing Empty String for toString

  Details:
    TestName: testEmptyToString.
    Description: This test is meant to check the scenario where the MonitorResults object has no readings in it. The toString function should return only the timestamp.
  Execution:
    Arrange: Create a MonitorResults object with a given timestamp, but no readings.
    Act: Invoke the toString method on the MonitorResults object.
    Assert: Assert that the returned String matches the timestamp alone.
  Validation:
    The expected result is only the timestamp, since the readings was nil.
    This proves that the method can handle scenario where MonitorResults object has no readings.


  Scenario 2: Testing Single Reading for toString

  Details:
    TestName: testSingleReadingToString.
    Description: This test is meant to check the scenario where the MonitorResults object has only one reading in it. The toString function should return a String that includes the name and value of the single ReadingBean object.
  Execution:
    Arrange: Create a MonitorResults object with one ReadingBean object and a given timestamp.
    Act: Invoke the toString method on the MonitorResults object.
    Assert: Assert that the returned String includes the name and value of the ReadingBean object and timestamp.
  Validation:
    This verifies correctness of result generation for scenarios where MonitorResults object has only one reading.


  Scenario 3: Testing Multiple Readings for toString

  Details:
    TestName: testMultipleReadingsToString.
    Description: This test verifies the scenario where the MonitorResults object has multiple readings. The toString function should return a String that combines the names and values of all ReadingBean objects in the order they are in the list.
  Execution:
    Arrange: Create a MonitorResults object with multiple ReadingBean object and a given timestamp.
    Act: Invoke the toString method on the MonitorResults object.
    Assert: Assert that the returned String correctly includes all names and values of the ReadingBean objects listed in the order they have been added.
  Validation:
    This verifies the accurate representation of all ReadingBean objects in the resultant String from the toString() method.


  Scenario 4: Testing Null Readings for toString

  Details:
    TestName: testNullReadingsToString.
    Description: The test is meant to test the scenario where the readings list is null. The toString function should handle it gracefully and not break.
  Execution:
    Arrange: Create a MonitorResults object with null readings and a given timestamp.
    Act: Invoke the toString method on the MonitorResults object.
    Assert: Assert that the returned string is not null and contains only the timestamp.
  Validation:
    This confirms the method's resilient against null values and ensures smooth operation under such conditions.
    This is vital to ensure robustness and avoid Null Pointer Exceptions during runtime.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import com.axway.ats.common.performance.monitor.beans.MonitorResults;
import com.axway.ats.common.performance.monitor.beans.ReadingBean;
import java.util.ArrayList;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.List;

class MonitorResultsToStringTest {

	@Test
	@Tag("valid")
	void testEmptyToString() {
		MonitorResults mr = new MonitorResults(123, new ArrayList<>());
		String result = mr.toString();
		assertEquals("123: ", result);
	}

	@Test
	@Tag("valid")
	void testSingleReadingToString() {
		ArrayList<ReadingBean> readings = new ArrayList<>();
		ReadingBean reading = new ReadingBean();
		reading.setName("test");
		reading.setValue("value");
		readings.add(reading);
		MonitorResults mr = new MonitorResults(123, readings);
		String result = mr.toString();
		assertEquals("123: test = value, ", result);
	}

	@Test
	@Tag("valid")
	void testMultipleReadingsToString() {
		ArrayList<ReadingBean> readings = new ArrayList<>();
		ReadingBean reading1 = new ReadingBean();
		reading1.setName("test1");
		reading1.setValue("value1");
		readings.add(reading1);
		ReadingBean reading2 = new ReadingBean();
		reading2.setName("test2");
		reading2.setValue("value2");
		readings.add(reading2);
		MonitorResults mr = new MonitorResults(123, readings);
		String result = mr.toString();
		assertEquals("123: test1 = value1, test2 = value2, ", result);
	}

	@Test
	@Tag("valid")
	void testNullReadingsToString() {
		MonitorResults mr = new MonitorResults(123, null);
		String result = mr.toString();
		assertEquals("123: ", result);
	}

}