/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=FileMatchInfo_23fca4bb55
ROOST_METHOD_SIG_HASH=FileMatchInfo_465b7c04f3
"""
  Scenario 1: Verify FileMatchInfo Object Initialization with Correct Parameters
  Details:
    TestName: validateFileMatchInfoInitialization.
    Description: This test checks if the FileMatchInfo object is correctly initialized when valid parameters are passed to the constructor. We test the basic functionality of the method.
  Execution:
    Arrange: Define values for numberOfMatchedLines, lastReadLineNumber, lastReadByte, and arrays for lines, lineNumbers, and matchedPatterns.
    Act: Invoke the FileMatchInfo constructor with the prepared parameters.
    Assert: Assert if the object's properties are correctly initialized as the passed parameters.
  Validation:
    The assertion is aimed at verifying that object properties are correctly set upon invocation of the constructor. The expected result is based on the known property values since anything different would indicate that the constructor is not initializing the object's properties correctly.
  Scenario 2: Verify Object Initialization with Zero numberOfMatchedLines
  Details:
    TestName: testInitializationWithZeroMatchedLines.
    Description: This test validates if the FileMatchInfo constructor correctly initializes the object's properties when numberOfMatchedLines is zero.
  Execution:
    Arrange: Define values for method parameters and make sure numberOfMatchedLines is set to zero.
    Act: Call the constructor using the defined parameters.
    Assert: Assert the value of the 'matched' property of the object is false.
  Validation:
    The goal of this test is to validate the constructor's functionality when the numberOfMatchedLines is zero. The 'matched' property should be initialized to false when the numberOfMatchedLines is zero which is the basis for the expected result.
  Scenario 3: Verify Initialization with Non-empty Arrays and Matched Lines
  Details:
    TestName: testInitializationWithNonEmptyArrays.
    Description: This scenario verifies if the constructor correctly initializes the object with non-empty arrays and non-zero matched lines.
  Execution:
    Arrange: Set up parameters including non-empty arrays for lines, lineNumbers, and matchedPatterns, and a positive integer for numberOfMatchedLines.
    Act: Invoke the FileMatchInfo constructor with the setup parameters.
    Assert: Verify that the 'matched' property has been set to true and the properties 'lines', 'lineNumbers' and 'matchedPatterns' contain elements.
  Validation:
    The aim is to check whether the constructor correctly initializes the object when valid non-empty parameters are passed, based on the known expected property values.
  Scenario 4: Test Behavior with Null Parameters
  Details:
    TestName: testInitializationWithNullParameters.
    Description: This case checks if the constructor behaves as expected when null parameters are passed.
  Execution:
    Arrange: Pass null values for the arrays lines, lineNumbers, and matchedPatterns.
    Act: Invoke the FileMatchInfo constructor with these parameters.
    Assert: Check that the object's properties lines, lineNumbers, and matchedPatterns are null, based on the passed parameters.
  Validation:
    This test checks if the constructor can handle null inputs and correctly initializes the object's properties. The expected result is based on the fact that the constructor should not transform the input in any way, and thus null input should lead to null property values.
  """
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.FileMatchInfo")
public class FileMatchInfoTest {

	@Test
	@Tag("valid")
	public void validateFileMatchInfoInitialization() {
		int numberOfMatchedLines = 2;
		int lastReadLineNumber = 5;
		long lastReadByte = 200l;
		String[] lines = { "line 1", "line 2" };
		Integer[] lineNumbers = { 1, 2 };
		String[] matchedPatterns = { "pattern 1", "pattern 2" };
		FileMatchInfo fileMatchInfo = new FileMatchInfo(numberOfMatchedLines, lastReadLineNumber, lastReadByte, lines,
				lineNumbers, matchedPatterns);
		assertEquals(numberOfMatchedLines, fileMatchInfo.numberOfMatchedLines);
		assertTrue(fileMatchInfo.matched);
		assertEquals(lastReadByte, fileMatchInfo.lastReadByte);
		assertArrayEquals(lines, fileMatchInfo.lines);
		assertArrayEquals(lineNumbers, fileMatchInfo.lineNumbers);
		assertArrayEquals(matchedPatterns, fileMatchInfo.matchedPatterns);
	}

	@Test
	@Tag("boundary")
	public void testInitializationWithZeroMatchedLines() {
		int numberOfMatchedLines = 0;
		int lastReadLineNumber = 0;
		long lastReadByte = 0l;
		String[] lines = {};
		Integer[] lineNumbers = {};
		String[] matchedPatterns = {};
		FileMatchInfo fileMatchInfo = new FileMatchInfo(numberOfMatchedLines, lastReadLineNumber, lastReadByte, lines,
				lineNumbers, matchedPatterns);
		assertFalse(fileMatchInfo.matched);
	}

	@Test
	@Tag("valid")
	public void testInitializationWithNonEmptyArrays() {
		int numberOfMatchedLines = 5;
		int lastReadLineNumber = 5;
		long lastReadByte = 500l;
		String[] lines = { "line 1", "line 2", "line 3", "line 4", "line 5" };
		Integer[] lineNumbers = { 1, 2, 3, 4, 5 };
		String[] matchedPatterns = { "pattern 1", "pattern 2", "pattern 3", "pattern 4", "pattern 5" };
		FileMatchInfo fileMatchInfo = new FileMatchInfo(numberOfMatchedLines, lastReadLineNumber, lastReadByte, lines,
				lineNumbers, matchedPatterns);
		assertTrue(fileMatchInfo.matched);
		assertTrue(fileMatchInfo.lines.length > 0);
		assertTrue(fileMatchInfo.lineNumbers.length > 0);
		assertTrue(fileMatchInfo.matchedPatterns.length > 0);
	}

	@Test
	@Tag("invalid")
	public void testInitializationWithNullParameters() {
		String[] lines = null;
		Integer[] lineNumbers = null;
		String[] matchedPatterns = null;
		FileMatchInfo fileMatchInfo = new FileMatchInfo(0, 0, 0l, lines, lineNumbers, matchedPatterns);
		assertNull(fileMatchInfo.lines);
		assertNull(fileMatchInfo.lineNumbers);
		assertNull(fileMatchInfo.matchedPatterns);
	}

}