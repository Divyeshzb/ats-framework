// ********RoostGPT********
/*
Test generated by RoostGPT for test axay-unit-dm using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=FileMatchInfo_23fca4bb55
ROOST_METHOD_SIG_HASH=FileMatchInfo_465b7c04f3
"""
Scenario 1: Normal Flow Test
Details:
  TestName: verifyFileMatchInfoConstructorWithValidData
  Description: This test is designed to verify the behavior of the FileMatchInfo constructor when it is provided with valid input parameters. It ensures that the method correctly initializes object fields in-line with the provided data.
Execution:
  Arrange: Prepare parameters - appropriate values for numberOfMatchedLines, lastReadLineNumber, lastReadByte, lines, lineNumbers, and matchedPatterns.
  Act: Invoke the FileMatchInfo constructor with the arranged parameters.
  Assert: Use JUnit assertions to check if the object fields (lines, lineNumbers, matchedPatterns, numberOfMatchedLines, lastReadLineNumber, lastReadByte) have been set correctly as per the input parameters, and the 'matched' field is true if numberOfMatchedLines > 0 and false otherwise.
Validation:
  This test verifies the correct instantiation of FileMatchInfo objects and it's a significant test as proper object creations underpin class functionality.
Scenario 2: Edge Case Test Number of Matched Lines Zero
Details:
  TestName: verifyFileMatchInfoForZeroMatchedLines
  Description: This test is designed to validate the behavior of the FileMatchInfo constructor when numberOfMatchedLines equals 0.
Execution:
  Arrange: Prepare parameters ensuring the numberOfMatchedLines equals 0, and fill the rest parameters with valid data.
  Act: Invoke the FileMatchInfo constructor with the arranged parameters.
  Assert: Use JUnit assertions to ensure the 'matched' field is false and the other fields have been set correctly.
Validation:
  This test verifies the 'matched' field's correct adjustment, significant to ensure the object properly depict a situation with no matched lines.
Scenario 3: Null Array Parameters Test
Details:
  TestName: verifyFileMatchInfoForNullArrayParameters
  Description: The purpose of this test is to verify the behavior of the FileMatchInfo constructor when null is passed to any of the array parameters (lines, lineNumbers, matchedPatterns).
Execution:
  Arrange: Prepare parameters making sure to set at least one of the array parameters (lines, lineNumbers, matchedPatterns) to null.
  Act: Invoke the FileMatchInfo constructor with the arranged parameters.
  Assert: Use JUnit assertions to check if the null fields remain null and other fields have been set correctly.
Validation:
  This test aims to validate correct handling of null array parameters, significant to avoid NullPointerExceptions and ensure robust functionality.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.FileMatchInfo")
public class FileMatchInfoTest {

	@Test
	public void verifyFileMatchInfoConstructorWithValidData() {
		String[] expectedLines = { "Line1", "Line2" };
		Integer[] expectedLineNumbers = { 1, 2 };
		String[] expectedMatchedPatterns = { "Pattern1", "Pattern2" };
		int expectedNumberOfMatchedLines = 2;
		long expectedLastReadByte = 10l;
		int expectedlastReadLineNumber = 2;
		boolean expectedMatched = true;
		FileMatchInfo fileMatchInfo = new FileMatchInfo(expectedNumberOfMatchedLines, expectedlastReadLineNumber,
				expectedLastReadByte, expectedLines, expectedLineNumbers, expectedMatchedPatterns);

		assertEquals(expectedLines, fileMatchInfo.lines);
		assertEquals(expectedLineNumbers, fileMatchInfo.lineNumbers);
		assertEquals(expectedMatchedPatterns, fileMatchInfo.matchedPatterns);
		assertEquals(expectedNumberOfMatchedLines, fileMatchInfo.numberOfMatchedLines);
		assertEquals(expectedlastReadLineNumber, fileMatchInfo.lastReadLineNumber);
		assertEquals(expectedLastReadByte, fileMatchInfo.lastReadByte);
		assertEquals(expectedMatched, fileMatchInfo.matched);
	}

	@Test
	public void verifyFileMatchInfoForZeroMatchedLines() {
		String[] expectedLines = { "Line1", "Line2" };
		Integer[] expectedLineNumbers = { 1, 2 };
		String[] expectedMatchedPatterns = {};
		int expectedNumberOfMatchedLines = 0;
		long expectedLastReadByte = 10l;
		int expectedlastReadLineNumber = 2;
		boolean expectedMatched = false;
		FileMatchInfo fileMatchInfo = new FileMatchInfo(expectedNumberOfMatchedLines, expectedlastReadLineNumber,
				expectedLastReadByte, expectedLines, expectedLineNumbers, expectedMatchedPatterns);

		assertEquals(expectedLines, fileMatchInfo.lines);
		assertEquals(expectedLineNumbers, fileMatchInfo.lineNumbers);
		assertEquals(expectedMatchedPatterns, fileMatchInfo.matchedPatterns);
		assertEquals(expectedNumberOfMatchedLines, fileMatchInfo.numberOfMatchedLines);
		assertEquals(expectedlastReadLineNumber, fileMatchInfo.lastReadLineNumber);
		assertEquals(expectedLastReadByte, fileMatchInfo.lastReadByte);
		assertEquals(expectedMatched, fileMatchInfo.matched);
	}

	@Test
	public void verifyFileMatchInfoForNullArrayParameters() {
		String[] expectedLines = null;
		Integer[] expectedLineNumbers = null;
		String[] expectedMatchedPatterns = null;
		int expectedNumberOfMatchedLines = 0;
		long expectedLastReadByte = 10l;
		int expectedlastReadLineNumber = 2;
		boolean expectedMatched = false;
		FileMatchInfo fileMatchInfo = new FileMatchInfo(expectedNumberOfMatchedLines, expectedlastReadLineNumber,
				expectedLastReadByte, expectedLines, expectedLineNumbers, expectedMatchedPatterns);

		assertNull(fileMatchInfo.lines);
		assertNull(fileMatchInfo.lineNumbers);
		assertNull(fileMatchInfo.matchedPatterns);
		assertEquals(expectedNumberOfMatchedLines, fileMatchInfo.numberOfMatchedLines);
		assertEquals(expectedlastReadLineNumber, fileMatchInfo.lastReadLineNumber);
		assertEquals(expectedLastReadByte, fileMatchInfo.lastReadByte);
		assertEquals(expectedMatched, fileMatchInfo.matched);
	}

}