/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getBlockLength_2ff41c8f4f
ROOST_METHOD_SIG_HASH=getBlockLength_39bd2a06b3

"""

Scenario 1: Verify the ability to successfully retrieve the cipher block length

Details:
  TestName: obtainCipherBlockLength
  Description: This test is meant to check the functionality of the getBlockLength() method by retrieving the set cipher block length, thus ensuring it correctly returns the initialized value.
Execution:
  Arrange: Create an instance of the SshCipher entity, and then use the setBlockLength() method to initialize the blockLength field with a specific integer value.
  Act: Invoke the getBlockLength() method on the same instance.
  Assert: Use JUnit assertions to compare the returned value against the set value specified before.
Validation:
  This assertion verifies whether the getBlockLength() method correctly retrieves the initialized blockLength value. As such, this test aids in asserting the integrity of data retrieval in the context of this entity's encapsulation.

Scenario 2: Confirm that getBlockLength() returns default value when not explicitly set

Details:
  TestName: testDefaultBlockLength
  Description: This test verifies that the getBlockLength() method returns the default value (0 in case of int) when no explicit value has been set to the blockLength field.
Execution:
  Arrange: Instantiate the SshCipher object.
  Act: Directly invoke getBlockLength() without previously setting the blockLength field.
  Assert: Use JUnit assertions to check whether the returned value is 0.
Validation:
  This scenario is crucial for ensuring that getBlockLength() retrieves the correct default value, upholding the principle of least astonishment. This factors in significantly to understanding the baseline behavior of this entity in circumstances where no set method was invoked prior.

Scenario 3: Validate the response of getBlockLength() when the blockLength value has been changed multiple times

Details:
  TestName: testMultipleBlockLengthChanges
  Description: This test is meant to check that the getBlockLength() method correctly returns the blockLength, even after having its value changed several times.
Execution:
  Arrange: Instantiate SshCipher, then call setBlockLength() multiple times with different values.
  Act: Call getBlockLength().
  Assert: Assert that the returned value is equal to the most recent set value.
Validation:
  This test asserts the consistency of the getBlockLength() method's retrieval functionality in dynamic scenarios. This is vital to proving the capability of the entity in adapting to changing conditions or requirements.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filetransfer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;

public class SshCipherGetBlockLengthTest {

	@Test
	@Tag("valid")
	public void obtainCipherBlockLength() {
		// Arrange
		SshCipher cipher = new SshCipher("aes128-cbc", "AES/CBC/NoPadding", "BC", 16, 16);
		int expectedBlockLength = 12;
		cipher.setBlockLength(expectedBlockLength);

		// Act
		int actualBlockLength = cipher.getBlockLength();

		// Assert
		assertEquals(expectedBlockLength, actualBlockLength);
	}

	@Test
	@Tag("boundary")
	public void testDefaultBlockLength() {
		// Arrange
		SshCipher cipher = new SshCipher("aes128-cbc", "AES/CBC/NoPadding", "BC", 16, 16);

		// Act
		int blockLength = cipher.getBlockLength();

		// Assert
		assertEquals(0, blockLength);
	}

	@Test
	@Tag("valid")
	public void testMultipleBlockLengthChanges() {
		// Arrange
		SshCipher cipher = new SshCipher("aes128-cbc", "AES/CBC/NoPadding", "BC", 16, 16);
		cipher.setBlockLength(10);
		cipher.setBlockLength(20);
		int expectedBlockLength = 30;
		cipher.setBlockLength(expectedBlockLength);

		// Act
		int actualBlockLength = cipher.getBlockLength();

		// Assert
		assertEquals(expectedBlockLength, actualBlockLength);
	}

}