/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=applyMemoryNormalizationFactor_d6e5968909
ROOST_METHOD_SIG_HASH=applyMemoryNormalizationFactor_ed7c224e9d

"""
Scenario 1: Testing memory normalization with "Byte" unit
TestName: testMemoryNormalizationForByteUnit
Description: This test would verify if the correct normalization factor is applied when the unit is set to "Byte".
Execution:
  Arrange: Initialize SharedReadingBean object with "Byte" as the unit.
  Act: Invoke method applyMemoryNormalizationFactor().
  Assert: Assert that normalizationFactor equals to 1.0.
Validation: The expected normalization for "Byte" unit is 1.0, hence the test asserts to ensure the method behaves correctly.

Scenario 2: Testing memory normalization with "KB" unit
TestName: testMemoryNormalizationForKBUnit
Description: This test would verify if the correct normalization factor is applied when the unit is set to "KB".
Execution:
  Arrange: Initialize SharedReadingBean object with "KB" as the unit.
  Act: Invoke method applyMemoryNormalizationFactor().
  Assert: Assert that normalizationFactor equals to 1/1024.0.
Validation: The expected normalization for "KB" unit is 1/1024.0, thus the test verifies that the method performs correct normalization.

Scenario 3: Testing memory normalization with "MB" unit
TestName: testMemoryNormalizationForMBUnit
Description: This test would verify if the correct normalization factor is applied when the unit is set to "MB".
Execution:
  Arrange: Initialize SharedReadingBean object with "MB" as the unit.
  Act: Invoke method applyMemoryNormalizationFactor().
  Assert: Assert that normalizationFactor equals to 1/(1024*1024.0).
Validation: The expected normalization for "MB" unit is 1/(1024*1024.0), so this test serves to ensure the method works correctly.

Scenario 4: Testing memory normalization with an unknown unit
TestName: testMemoryNormalizationForUnknownUnit
Description: This test would validate how the method handles unknown units.
Execution:
  Arrange: Initialize SharedReadingBean object with a unit that doesn't start with "Byte", "KB", or "MB".
  Act: Invoke method applyMemoryNormalizationFactor().
  Assert: Assert that normalizationFactor equals to 1.0; Assert that logUnknownUnitError method was called with appropriate parameters.
Validation: As per the method's logic, an unknown unit should default to "Byte" and log a warning of the unknown unit. Thus, the test tries to verify this behaviour.

Scenario 5: Testing memoery normalization with null unit
TestName: testMemoryNormalizationForNullUnit
Description: This test would examine the method's behaviour when the unit is not set.
Execution:
  Arrange: Initialize SharedReadingBean object without setting the unit.
  Act: Invoke method applyMemoryNormalizationFactor().
  Assert: Assert that normalizationFactor equals to 1.0; Assert that logUnknownUnitError method was called with appropriate parameters.
Validation: The method should default to "Byte" and log a warning of unknown unit when a unit is not set. That's what the test will check.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import org.junit.jupiter.api.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import org.apache.log4j.Logger;

public class SharedReadingBeanApplyMemoryNormalizationFactorTest {

	private SharedReadingBean sharedReadingBean;

	@BeforeEach
	public void setup() {
		sharedReadingBean = Mockito.spy(new SharedReadingBean("TestClass", "TestReadingName", null, 0.0F));
	}

	@AfterEach
	public void teardown() {
		sharedReadingBean = null;
	}

	@Test
	@Tag("valid")
	public void testMemoryNormalizationForByteUnit() {
		sharedReadingBean.setUnit("Byte");
		sharedReadingBean.applyMemoryNormalizationFactor();
		assertEquals(1.0F, sharedReadingBean.normalizationFactor);
	}

	@Test
	@Tag("valid")
	public void testMemoryNormalizationForKBUnit() {
		sharedReadingBean.setUnit("KB");
		sharedReadingBean.applyMemoryNormalizationFactor();
		assertEquals(1.0F / 1024.0F, sharedReadingBean.normalizationFactor);
	}

	@Test
	@Tag("valid")
	public void testMemoryNormalizationForMBUnit() {
		sharedReadingBean.setUnit("MB");
		sharedReadingBean.applyMemoryNormalizationFactor();
		assertEquals(1.0F / (1024.0F * 1024.0F), sharedReadingBean.normalizationFactor);
	}

	@Test
	@Tag("invalid")
	public void testMemoryNormalizationForUnknownUnit() {
		sharedReadingBean.setUnit("UnknownUnit");
		sharedReadingBean.applyMemoryNormalizationFactor();
		assertEquals(1.0F, sharedReadingBean.normalizationFactor);
		ArgumentCaptor<String[]> validUnitsCaptor = ArgumentCaptor.forClass(String[].class);
		verify(sharedReadingBean).logUnknownUnitError(Mockito.anyString(), validUnitsCaptor.capture(),
				Mockito.anyString());
		String[] validUnits = validUnitsCaptor.getValue();
		assertEquals(3, validUnits.length);
		assertEquals("Byte", validUnits[0]);
		assertEquals("KB", validUnits[1]);
		assertEquals("MB", validUnits[2]);
	}

	@Test
	@Tag("invalid")
	public void testMemoryNormalizationForNullUnit() {
		sharedReadingBean.setUnit(null);
		sharedReadingBean.applyMemoryNormalizationFactor();
		assertEquals(1.0F, sharedReadingBean.normalizationFactor);
		ArgumentCaptor<String[]> validUnitsCaptor = ArgumentCaptor.forClass(String[].class);
		verify(sharedReadingBean).logUnknownUnitError(Mockito.anyString(), validUnitsCaptor.capture(),
				Mockito.anyString());
		String[] validUnits = validUnitsCaptor.getValue();
		assertEquals(3, validUnits.length);
		assertEquals("Byte", validUnits[0]);
		assertEquals("KB", validUnits[1]);
		assertEquals("MB", validUnits[2]);
	}

}