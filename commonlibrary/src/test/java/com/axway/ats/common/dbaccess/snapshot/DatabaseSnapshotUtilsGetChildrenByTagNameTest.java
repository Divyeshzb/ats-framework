/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getChildrenByTagName_a5d84bdf5a
ROOST_METHOD_SIG_HASH=getChildrenByTagName_0001e35b55

"""
Scenario 1: Test Valid Node With Specified Children Name

Details:
  TestName: testValidNodeWithName.
  Description: This test is designed to verify if the method accurately retrieves all child nodes of a parent node which matches a specified name.

Execution:
  Arrange: Create a parent node with several children nodes, some of which match the specified name.
  Act: Invoke the getChildrenByTagName method with the given parent node and the name of the matching nodes.
  Assert: Use JUnit assertions to compare the actual returned list against the expected list of nodes.

Validation:
  This assertion aims to verify that the method accurately retrieves all matching children nodes. It is significant in cases where nodes with a specific name are needed from a populated node tree.


Scenario 2: Test Without any Child Node with the Specified Name

Details:
  TestName: testNoChildWithName.
  Description: This test checks if the method correctly returns an empty list if there are no child nodes with the specified name.

Execution:
  Arrange: Create a parent node with several children nodes, none of which match the specified name.
  Act: Invoke the getChildrenByTagName method with the given parent node and a non-matching name.
  Assert: Use JUnit assertions to assert that the returned list is empty.

Validation:
  This assertion verifies that the method correctly handles situations where no children match the specified name by returning an empty list. It validates the function's completeness and versatility.


Scenario 3: Test with Null Node

Details:
  TestName: testNullNode.
  Description: This test is designed to verify the method's behavior when a null node is supplied.

Execution:
  Arrange: Do not prepare any data as the input node is null.
  Act: Invoke the getChildrenByTagName method with a null node and any string for name attribute.
  Assert: Use JUnit assertions to compare the actual returned list against an empty list.

Validation:
  The assertion aims to validate that the method correctly handles null input by returning an empty list. This means that the method is robust against null inputs.


Scenario 4: Test with Node Without Children

Details:
  TestName: testNodeWithoutChildren.
  Description: This test aims to confirm how the method behaves when the supplied parent node has no child nodes.

Execution:
  Arrange: Create a parent node without children nodes.
  Act: Invoke getChildrenByTagName method with the parent node and any string for a name.
  Assert: Use JUnit assertions to assert that the returned list is empty.

Validation:
  This assertion verifies that the method correctly handles cases where no children are present by returning an empty list. It shows that the method can adequately manage scenarios where the parent node has no children.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.dbaccess.snapshot;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class DatabaseSnapshotUtilsGetChildrenByTagNameTest {

	@Test
	@Tag("valid")
	public void testValidNodeWithName() throws Exception {
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
		Document document = documentBuilder.newDocument();
		Node parentNode = document.createElement("parent");
		// Construct children nodes
		Node childNode1 = document.createElement("child");
		Node childNode2 = document.createElement("child");
		Node childNode3 = document.createElement("notChild");
		parentNode.appendChild(childNode1);
		parentNode.appendChild(childNode2);
		parentNode.appendChild(childNode3);
		List<Element> nodeList = DatabaseSnapshotUtils.getChildrenByTagName(parentNode, "child");
		assertEquals(2, nodeList.size(), "Should return 2 child nodes.");
	}

	@Test
	@Tag("invalid")
	public void testNoChildWithName() throws Exception {
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
		Document document = documentBuilder.newDocument();
		Node parentNode = document.createElement("parent");
		// Construct a child node of different name
		Node childNode = document.createElement("notChild");
		parentNode.appendChild(childNode);
		List<Element> nodeList = DatabaseSnapshotUtils.getChildrenByTagName(parentNode, "child");
		assertTrue(nodeList.isEmpty(), "Should return an empty list.");
	}

	@Test
	@Tag("invalid")
	public void testNullNode() {
		Node parentNode = null;
		List<Element> nodeList = DatabaseSnapshotUtils.getChildrenByTagName(parentNode, "child");
		assertTrue(nodeList.isEmpty(), "Should return an empty list.");
	}

	@Test
	@Tag("boundary")
	public void testNodeWithoutChildren() throws Exception {
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
		Document document = documentBuilder.newDocument();
		Node parentNode = document.createElement("parent");
		List<Element> nodeList = DatabaseSnapshotUtils.getChildrenByTagName(parentNode, "child");
		assertTrue(nodeList.isEmpty(), "Should return an empty list.");
	}

}