/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getChildrenByTagName_a5d84bdf5a
ROOST_METHOD_SIG_HASH=getChildrenByTagName_0001e35b55
"""
Scenario 1: Successful retrieval of children by tag name
Details:
  TestName: testGetChildrenByTagNameSuccess
  Description: This test is meant to check the functionality of the method when it is given valid parameters, specifically a parent Node containing children elements and a matching child node name.
Execution:
  Arrange: The test will arrange for a Node object with several children, at least one of which has the provided child node name.
  Act: The test will invoke the getChildrenByTagName method, passing in our arranged Node object and a valid node name.
  Assert: The method should return a List of Elements that matches the child nodes with the given node name.
Validation:
  This assertion validates that the method successfully retrieves all Element children of the provided parent Node that match the given node name. This is crucial for accurately parsing and navigating XML data structures in the application.
Scenario 2: Retrieval of children by tag name where no matching children exist
Details:
  TestName: testGetChildrenByTagNameNoMatch
  Description: This test is designed to verify the method's behavior when no matching children exist in the parent Node i.e., there are no child nodes with the given name.
Execution:
  Arrange: Arrange a Node object with several children, none of which match the provided child node name.
  Act: Invoke the getChildrenByTagName method, passing in our arranged Node and a non-matching node name.
  Assert: The method should return an empty List, as there are no matching child nodes.
Validation:
  This test validates the method's ability to handle scenarios where there are no matching nodes, which is vital for preventing unnecessary errors and accurately reflecting the structure of XML data.
Scenario 3: Null Node parameter passed to getChildrenByTagName
Details:
  TestName: testGetChildrenByTagNameNullNode
  Description: This test aims to assess how the getChildrenByTagName method tackles a null Node parameter.
Execution:
  Arrange: No arrangements are needed as the Node to be passed is null.
  Act: Invoke the getChildrenByTagName method, passing a null Node and any node name.
  Assert: The method is expected to return an empty List as there are no child nodes to parse through in a null Node.
Validation:
  This assertion affirms that the method correctly handles null nodes without causing errors, which is important for maintaining application stability.
Scenario 4: Empty Node name passed to getChildrenByTagName
Details:
  TestName: testGetChildrenByTagNameEmptyNodeName
  Description: This test is to test the getChildrenByTagName method's functionality when provided with a Node and an empty String for the name parameter.
Execution:
  Arrange: A Node object with several children.
  Act: The getChildrenByTagName method is invoked with the arranged Node object and an empty String.
  Assert: The method should return an empty List, as there are no child nodes with an empty name.
Validation:
  This assertion ensures that the method handles scenarios where the name parameter is empty appropriately, returning an empty list instead of throwing errors or returning misinterpreted results.
"""
*/
// ********RoostGPT********
package com.axway.ats.common.dbaccess.snapshot;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.performance.monitor.beans")
@Tag("com.axway.ats.common.performance.monitor.beans.equals")
@Tag("com.axway.ats.common.dbaccess.snapshot")
@Tag("com.axway.ats.common.dbaccess.snapshot.getChildrenByTagName")
public class DatabaseSnapshotUtilsGetChildrenByTagNameTest {

	@Test
	@Tag("valid")
	public void testGetChildrenByTagNameSuccess() {
		final String childName = "MATCHING_NAME";
		Node parent = Mockito.mock(Node.class);
		Node child = Mockito.mock(Node.class);
		when(child.getNodeType()).thenReturn(Node.ELEMENT_NODE);
		when(child.getNodeName()).thenReturn(childName);
		when(parent.getFirstChild()).thenReturn(child);
		when(child.getNextSibling()).thenReturn(null);
		List<Element> result = DatabaseSnapshotUtils.getChildrenByTagName(parent, childName);
		assertEquals(1, result.size());
		assertEquals(child, result.get(0));
	}

	@Test
	@Tag("valid")
	public void testGetChildrenByTagNameNoMatch() {
		final String childName = "NON_MATCHING_NAME";
		Node parent = Mockito.mock(Node.class);
		Node child = Mockito.mock(Node.class);
		when(child.getNodeType()).thenReturn(Node.ELEMENT_NODE);
		when(child.getNodeName()).thenReturn(childName);
		when(parent.getFirstChild()).thenReturn(child);
		when(child.getNextSibling()).thenReturn(null);
		List<Element> result = DatabaseSnapshotUtils.getChildrenByTagName(parent, "DIFFERENT_NAME");
		assertTrue(result.isEmpty());
	}

	@Test
	@Tag("invalid")
	public void testGetChildrenByTagNameNullNode() {
		List<Element> result = DatabaseSnapshotUtils.getChildrenByTagName(null, "ANY_NAME");
		assertTrue(result.isEmpty());
	}

	@Test
	@Tag("boundary")
	public void testGetChildrenByTagNameEmptyNodeName() {
		final String childName = "CHILD_NAME";
		Node parent = Mockito.mock(Node.class);
		Node child = Mockito.mock(Node.class);
		when(child.getNodeType()).thenReturn(Node.ELEMENT_NODE);
		when(child.getNodeName()).thenReturn(childName);
		when(parent.getFirstChild()).thenReturn(child);
		when(child.getNextSibling()).thenReturn(null);
		List<Element> result = DatabaseSnapshotUtils.getChildrenByTagName(parent, "");
		assertTrue(result.isEmpty());
	}

}