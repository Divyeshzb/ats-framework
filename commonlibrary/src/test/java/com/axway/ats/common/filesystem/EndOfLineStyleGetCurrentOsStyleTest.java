// ********RoostGPT********
/*
Test generated by RoostGPT for test axay-unit-dm using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getCurrentOsStyle_5575ef2605
ROOST_METHOD_SIG_HASH=getCurrentOsStyle_6584ff69c2
Scenario 1: Test For Windows OS line End Style.
Details:
  TestName: testForWindowsOsLineEndStyle.
  Description: This test checks if the method correctly returns the 'WINDOWS' enum when the end of line character style is "\r\n".
Execution:
  Arrange: Set the system property "AtsSystemProperties.SYSTEM_LINE_SEPARATOR" to "\r\n".
  Act: Call the method 'getCurrentOsStyle'.
  Assert: The expected return value is 'WINDOWS'.
Validation:
  This verifies that the method correctly identifies the Windows end of line style. This is essential to preserve the formatting across OS platforms.
Scenario 2: Test For UNIX OS line End Style.
Details:
  TestName: testForUnixOsLineEndStyle.
  Description: This test checks if the method correctly returns the 'UNIX' enum when the end of line character style is "\n".
Execution:
  Arrange: Set the system property "AtsSystemProperties.SYSTEM_LINE_SEPARATOR" to "\n".
  Act: Call the method 'getCurrentOsStyle'.
  Assert: The expected return value is 'UNIX'.
Validation:
  This verifies that the method correctly identifies the Unix end of line style. This helps ensure the compatibility of the code across different operating systems.

Scenario 3: Test For MacOS line End Style.
Details:
  TestName: testForMacOsLineEndStyle.
  Description: This test checks if the method correctly returns the 'MACOS' enum when the end of line character style is "\r".
Execution:
  Arrange: Set the system property "AtsSystemProperties.SYSTEM_LINE_SEPARATOR" to "\r".
  Act: Call the method 'getCurrentOsStyle'.
  Assert: The expected return value is 'MACOS'.
Validation:
  This verifies that the method correctly identifies the MacOS end of line style, ensuring the readability of the text across different platforms.
Scenario 4: Unidentified OS line Ending Style.

Details:
  TestName: testForUnidentifiedOsLineEndStyle.
  Description: This test checks if the method correctly throws an IllegalArgumentException when the end of line character style doesn't match any of the specified styles ("\r\n", "\n", "\r").
Execution:
  Arrange: Set the system property "AtsSystemProperties.SYSTEM_LINE_SEPARATOR" to an unidentifiable string.
  Act: Call the method 'getCurrentOsStyle'.
  Assert: The method should throw an IllegalArgumentException.
Validation:
  This verifies that the method accurately throws an exception when it encounters an unidentifiable line end character style. This handling is crucial to avoid any unexpected behavior or incompatible code execution.
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import com.axway.ats.common.PublicAtsApi;
import com.axway.ats.common.systemproperties.AtsSystemProperties;
import org.apache.commons.lang.reflect.FieldUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import java.lang.reflect.Field;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.getCurrentOsStyle")
public class EndOfLineStyleGetCurrentOsStyleTest {

	@AfterEach
	public void cleanUp() throws IllegalAccessException {
		FieldUtils.writeStaticField(AtsSystemProperties.class, "SYSTEM_LINE_SEPARATOR",
				System.getProperty("line.separator"), true);
	}

	@Test
	public void testForWindowsOsLineEndStyle() throws IllegalAccessException {
		// Arrange
		FieldUtils.writeStaticField(AtsSystemProperties.class, "SYSTEM_LINE_SEPARATOR", "\r\n", true);
		// Act
		EndOfLineStyle actualResult = EndOfLineStyle.getCurrentOsStyle();
		// Assert
		assertEquals(EndOfLineStyle.WINDOWS, actualResult);
	}

	@Test
	public void testForUnixOsLineEndStyle() throws IllegalAccessException {
		// Arrange
		FieldUtils.writeStaticField(AtsSystemProperties.class, "SYSTEM_LINE_SEPARATOR", "\n", true);
		// Act
		EndOfLineStyle actualResult = EndOfLineStyle.getCurrentOsStyle();
		// Assert
		assertEquals(EndOfLineStyle.UNIX, actualResult);
	}

	@Test
	public void testForMacOsLineEndStyle() throws IllegalAccessException {
		// Arrange
		FieldUtils.writeStaticField(AtsSystemProperties.class, "SYSTEM_LINE_SEPARATOR", "\r", true);
		// Act
		EndOfLineStyle actualResult = EndOfLineStyle.getCurrentOsStyle();
		// Assert
		assertEquals(EndOfLineStyle.MACOS, actualResult);
	}

	@Test
	public void testForUnidentifiedOsLineEndStyle() throws IllegalAccessException {
		// Arrange
		FieldUtils.writeStaticField(AtsSystemProperties.class, "SYSTEM_LINE_SEPARATOR", "\0", true);
		// Act & Assert
		assertThrows(IllegalArgumentException.class, EndOfLineStyle::getCurrentOsStyle);
	}

}