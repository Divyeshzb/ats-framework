/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getNewCopy_31b1a3fe16
ROOST_METHOD_SIG_HASH=getNewCopy_94f9dd4915

Scenario 1: Testing the getNewCopy() method in normal conditions

Details:
  TestName: testGetNewCopyWithNormalValues.
  Description: This test is meant to check the normal behavior of the getNewCopy() method when invoked on an instance of ReadingBean with valid member variables.
Execution:
  Arrange: Create an instance of ReadingBean and populate all the parameters with valid values. Let's call this readingBeanOriginal.
  Act: Invoke the getNewCopy() method on readingBeanOriginal. Let's call the return instance readingBeanCopy.
  Assert: Use JUnit assertions to confirm that all properties of readingBeanCopy and readingBeanOriginal are equal.
Validation:
  The assertion aims to verify that the getNewCopy() method correctly copies all the parameters of the original instance to the new one. This test is significant because it checks the basic functionality of the getNewCopy() method.

Scenario 2: Testing getNewCopy() method where original instance has null parameters

Details:
  TestName: testGetNewCopyWithNullParameters.
  Description: This test targets the getNewCopy() method to handle the situation when parameters Map of the original ReadingBean instance is null.
Execution:
  Arrange: Create an instance of ReadingBean with all fields populated except for parameters which is null. Let's call this readingBeanOriginal.
  Act: Call getNewCopy() on readingBeanOriginal to get readingBeanCopy.
  Assert: Verify all properties of readingBeanCopy match with readingBeanOriginal, and also Confirm that getParameters() of readingBeanCopy returns null.
Validation:
  This test verifies that the getNewCopy() method correctly handles null parameters. The reason is that null parameters should not raise any exceptions and the copy should also have null parameters.

Scenario 3: Testing getNewCopy() returns a new instance

Details:
  TestName: testGetNewCopyReturnsNewInstance.
  Description: This test verifies whether the getNewCopy() method does return a new instance.
Execution:
  Arrange: Create a populated ReadingBean instance named readingBeanOriginal.
  Act: Invoke getNewCopy() on readingBeanOriginal to get readingBeanCopy.
  Assert: Confirm using JUnit assertions that readingBeanOriginal and readingBeanCopy are not the same instance.
Validation:
  The assertion confirms that getNewCopy() indeed returns a new instance of ReadingBean. This is important to ensure that the original and copied instance do not have any reference relationship.

Scenario 4: Testing getNewCopy() on instance with empty parameters

Details:
  TestName: testGetNewCopyWithEmptyParameters.
  Description: This test targets the getNewCopy() function handling an instance of ReadingBean with an empty HashMap for parameters.
Execution:
  Arrange: Create ReadingBean instance called readingBeanOriginal with all fields populated but parameters which is an empty HashMap.
  Act: Call getNewCopy() on readingBeanOriginal to get readingBeanCopy.
  Assert: Verify all properties of readingBeanCopy match with readingBeanOriginal and getParameters() of readingBeanCopy returns an empty map.
Validation:
  This scenario verifies the correct handling of instances with empty parameters map in getNewCopy() method. This situation may occur in normal execution and needs correct handling without exceptions and correct copy of the empty map.

*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;

public class ReadingBeanGetNewCopyTest {

	@Test
	@Tag("valid")
	public void testGetNewCopyWithNormalValues() {
		ReadingBean readingBeanOriginal = new ReadingBean();
		readingBeanOriginal.setName("name");
		readingBeanOriginal.setValue("value");
		readingBeanOriginal.setDynamicReading(true);
		readingBeanOriginal.setDbId(1);
		readingBeanOriginal.setId(1);
		Map<String, String> parameters = new HashMap<>();
		parameters.put("param1", "value1");
		readingBeanOriginal.setParameters(parameters);

		ReadingBean readingBeanCopy = readingBeanOriginal.getNewCopy();

		assertEquals(readingBeanOriginal.getName(), readingBeanCopy.getName());
		assertEquals(readingBeanOriginal.getValue(), readingBeanCopy.getValue());
		assertEquals(readingBeanOriginal.isDynamicReading(), readingBeanCopy.isDynamicReading());
		assertEquals(readingBeanOriginal.getDbId(), readingBeanCopy.getDbId());
		assertEquals(readingBeanOriginal.getId(), readingBeanCopy.getId());
		assertEquals(readingBeanOriginal.getParameters(), readingBeanCopy.getParameters());
	}

	@Test
	@Tag("valid")
	public void testGetNewCopyWithNullParameters() {
		ReadingBean readingBeanOriginal = new ReadingBean();
		readingBeanOriginal.setName("name");
		readingBeanOriginal.setValue("value");
		readingBeanOriginal.setDynamicReading(true);
		readingBeanOriginal.setDbId(1);
		readingBeanOriginal.setId(1);
		readingBeanOriginal.setParameters(null);

		ReadingBean readingBeanCopy = readingBeanOriginal.getNewCopy();

		assertEquals(readingBeanOriginal.getName(), readingBeanCopy.getName());
		assertEquals(readingBeanOriginal.getValue(), readingBeanCopy.getValue());
		assertEquals(readingBeanOriginal.isDynamicReading(), readingBeanCopy.isDynamicReading());
		assertEquals(readingBeanOriginal.getDbId(), readingBeanCopy.getDbId());
		assertEquals(readingBeanOriginal.getId(), readingBeanCopy.getId());
		assertNull(readingBeanCopy.getParameters());
	}

	@Test
	@Tag("valid")
	public void testGetNewCopyReturnsNewInstance() {
		ReadingBean readingBeanOriginal = new ReadingBean();
		readingBeanOriginal.setName("name");
		ReadingBean readingBeanCopy = readingBeanOriginal.getNewCopy();

		assertNotSame(readingBeanOriginal, readingBeanCopy);
	}

	@Test
	@Tag("valid")
	public void testGetNewCopyWithEmptyParameters() {
		ReadingBean readingBeanOriginal = new ReadingBean();
		readingBeanOriginal.setName("name");
		readingBeanOriginal.setParameters(Collections.emptyMap());

		ReadingBean readingBeanCopy = readingBeanOriginal.getNewCopy();

		assertEquals(readingBeanOriginal.getName(), readingBeanCopy.getName());
		assertTrue(readingBeanCopy.getParameters().isEmpty());
	}

}