/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=isSame_e4eae2550c
ROOST_METHOD_SIG_HASH=isSame_e4eae2550c

"""
Scenario 1: Test with Valid Table and Index Names returning true

Details:
    TestName: testIsSameWithValidTableAndIndexNames.
    Description: This test is designed to verify the functionality of the isSame method when provided with valid table and index names where both index names are same. This scenario is considered the most basic and normal use case of the isSame method.
  Execution:
    Arrange: Create valid table and index names.
    Act: Invoke isSame, supplying the created table and index names as parameters.
    Assert: The expected result of true is returned by isSame.
  Validation:
    The assertion checks if the method correctly identifies that the given index names of a specific table as same. Success of the test ensures that the method can correctly handle regular use cases.

Scenario 2: Test with Valid Table and Different Index Names returning false

Details:
    TestName: testIsSameWithValidTableAndDifferentIndexNames.
    Description: This test is designed to verify the functionality of the isSame method when provided with valid table and different index names.
  Execution:
    Arrange: Create valid table and index names where both index names are different.
    Act: Invoke isSame, supplying the created table and index names as parameters.
    Assert: The expected result of false is returned by isSame.
  Validation:
    The assertion checks if the method correctly identifies that the given index names of a specific table as different. The test should return false and helps to verify the correct functionality of isSame method.

Scenario 3: Test with Invalid/null Table Name returning IllegalArgumentException

Details:
    TestName: testIsSameWithInvalidTableName.
    Description: This test is designed to check if the isSame method correctly throws an IllegalArgumentException when provided with an invalid/null table name.
  Execution:
    Arrange: Create null or invalid table name and valid index names.
    Act: Invoke isSame, supplying the created table and index names as parameters.
    Assert: An IllegalArgumentException is thrown by isSame.
  Validation:
    The assertion checks if the method correctly handles the situation when an invalid input is provided. The successful execution of the test ensures exception handling and error tolerance of the method.

Scenario 4: Test with Invalid/null Index Names returning IllegalArgumentException

Details:
    TestName: testIsSameWithInvalidIndexNames.
    Description: This test is designed to check if the isSame method correctly throws an IllegalArgumentException when provided with invalid/null index names.
  Execution:
    Arrange: Create valid table name and invalid/null index names.
    Act: Invoke isSame, supplying the created table and index names as parameters.
    Assert: An IllegalArgumentException is thrown by isSame.
  Validation:
    The assertion verifies whether the method correctly identifies invalid input parameters and throws the intended exception. The success of this test would certify the robustness of the code against invalid inputs.

Scenario 5: Test for two different tables with same index names, returns false

Details:
    TestName: testIsSameWithSameIndexNamesInDifferentTables.
    Description: This test is designed to verify if the method appropriately identifies that two tables are different, even though their index names are same.
  Execution:
    Arrange: Create two different table names and same index names.
    Act: first, Invoke isSame for the first table and index names, then for the second table and index names.
    Assert: The method should return false asserting the tables are different.
  Validation:
    This test validates that the method processes table names and index names separately. The test outcome ensures the correct functionality of multi-table handling.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.dbaccess.snapshot;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.util.Properties;
import com.axway.ats.common.PublicAtsApi;

public class IndexMatcherIsSameTest {

	IndexMatcher indexMatcher;

	@BeforeEach
	public void setUp() {
		indexMatcher = new IndexMatcher();
	}

	@Test
	@Tag("valid")
	public void testIsSameWithValidTableAndIndexNames() {
		String table = "ValidTable";
		String firstName = "Index1";
		String secondName = "Index1";
		boolean result = indexMatcher.isSame(table, firstName, secondName);
		assertEquals(true, result);
	}

	@Test
	@Tag("valid")
	public void testIsSameWithValidTableAndDifferentIndexNames() {
		String table = "ValidTable";
		String firstName = "Index1";
		String secondName = "Index2";
		boolean result = indexMatcher.isSame(table, firstName, secondName);
		assertEquals(false, result);
	}

	@Test
	@Tag("invalid")
	public void testIsSameWithInvalidTableName() {
		String table = null;
		String firstName = "Index1";
		String secondName = "Index2";
		assertThrows(IllegalArgumentException.class, () -> indexMatcher.isSame(table, firstName, secondName));
	}

	@Test
	@Tag("invalid")
	public void testIsSameWithInvalidIndexNames() {
		String table = "ValidTable";
		String firstName = "Index1";
		String secondName = null;
		assertThrows(IllegalArgumentException.class, () -> indexMatcher.isSame(table, firstName, secondName));
	}

	@Test
	@Tag("integration")
	public void testIsSameWithSameIndexNamesInDifferentTables() {
		String table1 = "Table1";
		String table2 = "Table2";
		String firstName = "Index1";
		String secondName = "Index1";
		boolean result1 = indexMatcher.isSame(table1, firstName, secondName);
		boolean result2 = indexMatcher.isSame(table2, firstName, secondName);
		assertEquals(false, result1 == result2);
	}

	@AfterEach
	public void tearDown() {
		indexMatcher = null;
	}

}