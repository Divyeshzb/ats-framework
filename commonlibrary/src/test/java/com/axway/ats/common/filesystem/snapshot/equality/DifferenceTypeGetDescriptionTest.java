/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getDescription_e2c99ec204
ROOST_METHOD_SIG_HASH=getDescription_a769841fda

"""
Scenario 1: Test case when directory is present in first snapshot only

  Details:
    TestName: testDescriptionWhenDirPresentInFirstSnapshotOnly
    Description: This test case validates the getDescription method when directory is present in first snapshot only
  Execution:
    Arrange: Create an instance of DifferenceType with 'DIR_PRESENT_IN_FIRST_SNAPSHOT_ONLY' and two snapshot strings
    Act: Invoke getDescription method providing the snapshot string.
    Assert: Check the returned string matches the expected output.
  Validation:
    The assertion aims to verify the returned string is correctly stating that the directory is present in the first snapshot only. This ensures the method correctly handles the first case condition.

Scenario 2: Test case when directory is present in second snapshot only

  Details:
    TestName: testDescriptionWhenDirPresentInSecondSnapshotOnly
    Description: This test case validates the getDescription method when directory is present in the second snapshot only
  Execution:
    Arrange: Create an instance of DifferenceType with 'DIR_PRESENT_IN_SECOND_SNAPSHOT_ONLY' and two snapshot strings
    Act: Invoke getDescription method providing the snapshot string.
    Assert: Check the returned string matches the expected output.
  Validation:
    This test verifies the returned string is correct in stating the directory is only present in the second snapshot. This ensures the method correctly handles the second case condition.

Scenario 3: Test case when file is present in first snapshot only

  Details:
    TestName: testDescriptionWhenFilePresentInFirstSnapshotOnly
    Description: This test case validates the getDescription method when a file is present in the first snapshot only
  Execution:
    Arrange: Create an instance of DifferenceType with 'FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY' and two snapshot strings
    Act: Invoke getDescription method providing the snapshot string.
    Assert: Check the returned string matches the expected output.
  Validation:
    The assertion aims to verify the correct string is returned, stating that the file is only present in the first snapshot. This ensures the method correctly handles the third case.

Scenario 4: Test case when file is present in second snapshot only

  Details:
    TestName: testDescriptionWhenFilePresentInSecondSnapshotOnly
    Description: This test validates the getDescription method when a file is present in the second snapshot only
  Execution:
    Arrange: Create an instance of DifferenceType with 'FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY' and two snapshot strings
    Act: Invoke getDescription method providing the snapshot string.
    Assert: Check the returned string matches the expected output.
  Validation:
    The test aims to confirm that the correct string is returned, stating that the file is only present in the second snapshot. This ensures the method correctly handles the fourth case.

Scenario 5: Test case when neither a directory nor a file specifically exists in either snapshot

  Details:
    TestName: testDescriptionWithDifferentFiles
    Description: This test case validates the getDescription method when neither a directory nor a file exists in any one snapshot in specific.
  Execution:
    Arrange: Create an instance of DifferenceType with any value other than the given cases, and two snapshot strings
    Act: Invoke getDescription method providing the snapshot string.
    Assert: Check the returned string matches the expected output 'Different files:'.
  Validation:
    The assertion aims to verify the correct fallback string is returned when the DifferenceType does not match any of the specified cases.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filesystem.snapshot.equality;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import com.axway.ats.common.PublicAtsApi;

public class DifferenceTypeGetDescriptionTest {

	@Test
	@Tag("valid")
	public void testDescriptionWhenDirPresentInFirstSnapshotOnly() {
		DifferenceType diffType = DifferenceType.DIR_PRESENT_IN_FIRST_SNAPSHOT_ONLY;
		String firstSnapshot = "firstSnapshot";
		String secondSnapshot = "secondSnapshot";
		String result = diffType.getDescription(firstSnapshot, secondSnapshot);
		assertEquals("Directory is present in [" + firstSnapshot + "] snapshot only:", result);
	}

	@Test
	@Tag("valid")
	public void testDescriptionWhenDirPresentInSecondSnapshotOnly() {
		DifferenceType diffType = DifferenceType.DIR_PRESENT_IN_SECOND_SNAPSHOT_ONLY;
		String firstSnapshot = "firstSnapshot";
		String secondSnapshot = "secondSnapshot";
		String result = diffType.getDescription(firstSnapshot, secondSnapshot);
		assertEquals("Directory is present in [" + secondSnapshot + "] snapshot only:", result);
	}

	@Test
	@Tag("valid")
	public void testDescriptionWhenFilePresentInFirstSnapshotOnly() {
		DifferenceType diffType = DifferenceType.FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY;
		String firstSnapshot = "firstSnapshot";
		String secondSnapshot = "secondSnapshot";
		String result = diffType.getDescription(firstSnapshot, secondSnapshot);
		assertEquals("File is present in [" + firstSnapshot + "] snapshot only:", result);
	}

	@Test
	@Tag("valid")
	public void testDescriptionWhenFilePresentInSecondSnapshotOnly() {
		DifferenceType diffType = DifferenceType.FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY;
		String firstSnapshot = "firstSnapshot";
		String secondSnapshot = "secondSnapshot";
		String result = diffType.getDescription(firstSnapshot, secondSnapshot);
		assertEquals("File is present in [" + secondSnapshot + "] snapshot only:", result);
	}

	@Test
	@Tag("valid")
	public void testDescriptionWithDifferentFiles() {
		DifferenceType diffType = DifferenceType.FILE_SIZE_DIFFERS;
		String firstSnapshot = "firstSnapshot";
		String secondSnapshot = "secondSnapshot";
		String result = diffType.getDescription(firstSnapshot, secondSnapshot);
		assertEquals("Different files:", result);
	}

}