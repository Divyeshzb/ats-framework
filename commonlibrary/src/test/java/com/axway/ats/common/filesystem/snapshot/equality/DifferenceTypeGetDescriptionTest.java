/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getDescription_e2c99ec204
ROOST_METHOD_SIG_HASH=getDescription_a769841fda
"""
  Scenario 1: Testing DIR_PRESENT_IN_FIRST_SNAPSHOT_ONLY Enum case
  Details:
    TestName: testDIRPresentInFirstSnapshotOnly
    Description: Checks the functionality of the method getDescription() when DIR_PRESENT_IN_FIRST_SNAPSHOT_ONLY is provided as parameter.
  Execution:
    Arrange: Instantiate two snapshot string values such as "Snapshot1" and "Snapshot2".
    Act: Invoke the getDescription() method with DIR_PRESENT_IN_FIRST_SNAPSHOT_ONLY case.
    Assert: Use assertEquals() to compare the outcome of the method call with the expected result.
  Validation:
    The assertion aims to verify that the correct description, according to the ENUM case provided is returned. The result should be "Directory is present in [Snapshot1] snapshot only".
  Scenario 2: Testing DIR_PRESENT_IN_SECOND_SNAPSHOT_ONLY Enum case
  Details:
    TestName: testDIRPresentInSecondSnapshotOnly
    Description: Checks the functionality of the method getDescription() when DIR_PRESENT_IN_SECOND_SNAPSHOT_ONLY is provided as parameter.
  Execution:
    Arrange: Instantiate two snapshot string values such as "Snapshot1" and "Snapshot2".
    Act: Invoke the getDescription() method with DIR_PRESENT_IN_SECOND_SNAPSHOT_ONLY case.
    Assert: Use assertEquals() to compare the outcome of the method call with the expected result.
  Validation:
    The assertion aims to verify that the correct description, according to the ENUM case provided is returned. The result should be "Directory is present in [Snapshot2] snapshot only".
  Scenario 3: Testing FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY Enum case
  Details:
    TestName: testFilePresentInFirstSnapshotOnly
    Description: Checks the functionality of the method getDescription() when FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY is provided as parameter.
  Execution:
    Arrange: Instantiate two snapshot string values such as "Snapshot1" and "Snapshot2".
    Act: Invoke the getDescription() method with FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY case.
    Assert: Use assertEquals() to compare the outcome of the method call with the expected result.
  Validation:
    The assertion aims to verify that the correct description, according to the ENUM case provided is returned. The result should be "File is present in [Snapshot1] snapshot only".
  Scenario 4: Testing FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY Enum case
  Details:
    TestName: testFilePresentInSecondSnapshotOnly
    Description: Checks the functionality of the method getDescription() when FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY is provided as parameter.
  Execution:
    Arrange: Instantiate two snapshot string values such as "Snapshot1" and "Snapshot2".
    Act: Invoke the getDescription() method with FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY case.
    Assert: Use assertEquals() to compare the outcome of the method call with the expected result.
  Validation:
    The assertion aims to verify that the correct description, according to the ENUM case provided is returned. The result should be "File is present in [Snapshot2] snapshot only".
  Scenario 5: Testing DEFAULT Enum case
  Details:
    TestName: testDefault
    Description: Checks the functionality of the method getDescription() when DEFAULT case is provided.
  Execution:
    Arrange: Instantiate two snapshot string values such as "Snapshot1" and "Snapshot2".
    Act: Invoke the getDescription() method with DEFAULT case.
    Assert: Use assertEquals() to compare the outcome of the method call with the expected result.
  Validation:
    The assertion aims to verify that the correct description, according to the DEFAULT case provided is returned. The result should be "Different files:".
"""
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem.snapshot.equality;

import com.axway.ats.common.PublicAtsApi;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem.snapshot.equality")
@Tag("com.axway.ats.common.filesystem.snapshot.equality.getDescription")
public class DifferenceTypeGetDescriptionTest {

	@Test
    @Tag('valid')
    public void testDIRPresentInFirstSnapshotOnly() {
        String firstSnapshot = "Snapshot1";
        String secondSnapshot = "Snapshot2";
        String description = DifferenceType.DIR_PRESENT_IN_FIRST_SNAPSHOT_ONLY.getDescription(firstSnapshot, secondSnapshot);
        assertEquals("Directory is present in [" + firstSnapshot + "] snapshot only:", description);
    }

	@Test
	@Tag
	('valid')public void testDIRPresentInSecondSnapshotOnly() {
		String firstSnapshot = "Snapshot1";
		String secondSnapshot = "Snapshot2";
		String description = DifferenceType.DIR_PRESENT_IN_SECOND_SNAPSHOT_ONLY.getDescription(firstSnapshot,
				secondSnapshot);
		assertEquals("Directory is present in [" + secondSnapshot + "] snapshot only:", description);
	}

	@Test
	@Tag
	('valid')public void testFilePresentInFirstSnapshotOnly() {
		String firstSnapshot = "Snapshot1";
		String secondSnapshot = "Snapshot2";
		String description = DifferenceType.FILE_PRESENT_IN_FIRST_SNAPSHOT_ONLY.getDescription(firstSnapshot,
				secondSnapshot);
		assertEquals("File is present in [" + firstSnapshot + "] snapshot only:", description);
	}

	@Test
	@Tag
	('valid')public void testFilePresentInSecondSnapshotOnly() {
		String firstSnapshot = "Snapshot1";
		String secondSnapshot = "Snapshot2";
		String description = DifferenceType.FILE_PRESENT_IN_SECOND_SNAPSHOT_ONLY.getDescription(firstSnapshot,
				secondSnapshot);
		assertEquals("File is present in [" + secondSnapshot + "] snapshot only:", description);
	}

	@Test
	@Tag
	('valid')public void testDefault() {
		String firstSnapshot = "Snapshot1";
		String secondSnapshot = "Snapshot2";
		String description = DifferenceType.DEFAULT.getDescription(firstSnapshot, secondSnapshot);
		assertEquals("Different files:", description);
	}

}