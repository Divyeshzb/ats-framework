/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getFirstSnapshotName_cec20eee1e
ROOST_METHOD_SIG_HASH=getFirstSnapshotName_6cfc172505

"""
  Scenario 1: Test to check the output of the getFirstSnapshotName method when the first snapshot name is already set.

  Details:
    TestName: testFirstSnapshotName
    Description: This test aims to validate if the getFirstSnapshotName method returns exact name of the snapshot when it's already set.
  Execution:
    Arrange: Instantiate an entity of FileSystemEqualityState. Use setFirstSnapshotName method to set the name of first snapshot.
    Act: Invoke the getFirstSnapshotName method.
    Assert: The return value matches the snapshot name set earlier.
  Validation:
    This assertion verifies if the method properly retrieves the name of the first snapshot. In this case, successfull retrieval of the name represents accurate functionality of the method.

  Scenario 2: Test to check the output of the getFirstSnapshotName method when the first snapshot name is not set.

  Details:
    TestName: testFirstSnapshotNameWhenNotSet
    Description: This test aims to validate if the getFirstSnapshotName method returns null or an appropriate response when no name is set for the first snapshot.
  Execution:
    Arrange: Instantiate an entity of FileSystemEqualityState. Do not set the name for first snapshot.
    Act: Invoke the getFirstSnapshotName method.
    Assert: The return value should be null or any default value if the snapshot name is not set.
  Validation:
    This assertion is significant to check the behavior of the method, when no snapshot name is set. This can resemble scenario when user might have forgotten to set the snapshot name or due to some initial state of application.

  Scenario 3: Test if the getFirstSnapshotName returns correctly for valid special characters in first snapshot name.

  Details:
    TestName: testSpecialCharacterInFirstSnapshotName
    Description: This test aims to validate if the getFirstSnapshotName method correctly handles special characters in the snapshot name.
  Execution:
    Arrange: Instantiate an entity of FileSystemEqualityState. Set a snapshot name containing special characters using setFirstSnapshotName method.
    Act: Invoke getFirstSnapshotName method.
    Assert: The return value matches the snapshot name set earlier with correct special characters.
  Validation:
    This test aims to verify that method can handle special characters within the snapshot name. To an end user, success indicates that the application can handle flexible snapshot naming with special characters.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filesystem.snapshot.equality;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import com.axway.ats.common.filesystem.snapshot.equality.FileSystemEqualityState;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.axway.ats.common.PublicAtsApi;

public class FileSystemEqualityStateGetFirstSnapshotNameTest {

	@Test
	@Tag("valid")
	public void testFirstSnapshotName() {
		String firstSnapshotName = "snapshot1";
		FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState(firstSnapshotName, "snapshot2");
		assertEquals(firstSnapshotName, fileSystemEqualityState.getFirstSnapshotName());
	}

	@Test
	@Tag("boundary")
	public void testFirstSnapshotNameWhenNotSet() {
		FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState(null, "snapshot2");
		assertNull(fileSystemEqualityState.getFirstSnapshotName());
	}

	@Test
	@Tag("valid")
	public void testSpecialCharacterInFirstSnapshotName() {
		String firstSnapshotName = "snapshot#1";
		FileSystemEqualityState fileSystemEqualityState = new FileSystemEqualityState(firstSnapshotName, "snapshot2");
		assertEquals(firstSnapshotName, fileSystemEqualityState.getFirstSnapshotName());
	}

}