/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=FileTransferException_91795fabda
ROOST_METHOD_SIG_HASH=FileTransferException_1f46fb00a0

"""
Scenario 1: Expected Exception is thrown

Details:
  TestName: shouldThrowFileTransferException.
  Description: This test verifies that FileTransferException is thrown when a null exception is passed to the method.
Execution:
  Arrange: No arrangement required in this case as we are passing null as a parameter.
  Act: Create the FileTransferException instance with a null value.
  Assert: Expect the FileTransferException to be thrown. Use the expected annotation from JUnit to indicate that the FileTransferException should be thrown.
Validation:
  This asserts if the FileTransferException is thrown when the parameter is null. The construction of a null parameter here expresses a non-existent exception, implying that the system should throw the actual FileTransferException which would be crucial in logging and debugging.

Scenario 2: Exception parameter is populated

Details:
   TestName: shouldAcceptPopulatedException.
   Description: The purpose of this test is to determine whether FileTransferException accurately passes the provided exception when it's not null.
Execution:
   Arrange: Create an exception with a sample message.
   Act: A FileTransferException instance is created with the above exception as argument.
   Assert: Extract the cause from FileTransferException and assert that it is equal to the original exception.
Validation:
   It validates that the thrown FileTransferException carries the original exception data. This is significant to the business as it helps in understanding the originating source of errors and assists in troubleshooting.

Scenario 3: FileTransferException wraps the Exceptionâ€™s message correctly.

Details:
  TestName: shouldWrapExceptionMessage
  Description: This test ensures that the exception message is correctly wrapped within the FileTransferException.
Execution:
  Arrange: Create an exception with a specific message.
  Act: Invoke the FileTransferException with a created exception as an argument.
  Assert: Use JUnit assertion to validate that the message from FileTransferException matches the original exception message.
Validation:
  This verifies that the messages from exceptions are being correctly transferred when wrapped in a FileTransferException. This is vital in maintaining precise error logs and aiding in the debugging process.

NOTE: Since Java does not support traditional getter and setter mechanisms for Exception classes, detailed verification might not be possible. Assertions can be focused on behavior rather than state.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filetransfer;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import com.axway.ats.common.PublicAtsApi;

public class FileTransferExceptionFileTransferException145Test {

	private static final long serialVersionUID = 1L;

	@Test
	@Tag("Invalid")
	public void shouldThrowFileTransferException() {
		Exception e = null;

		Exception exception = assertThrows(FileTransferException.class, () -> {
			new FileTransferException(e);
		}, "Expected FileTransferException to be thrown when exception parameter is null");
	}

	@Test
	@Tag("Valid")
	public void shouldAcceptPopulatedException() {
		Exception e = new Exception("Sample exception");
		FileTransferException fileTransEx = new FileTransferException(e);
		assertSame(fileTransEx.getCause(), e);
	}

	@Test
	@Tag("Valid")
	public void shouldWrapExceptionMessage() {
		Exception e = new Exception("Sample exception");
		FileTransferException fileTransEx = new FileTransferException(e);

		assertEquals(e.getMessage(), fileTransEx.getMessage());
	}

}