/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getTablesPresentInOneSnapshotOnly_b4d85890e3
ROOST_METHOD_SIG_HASH=getTablesPresentInOneSnapshotOnly_cf273cba36

"""
Scenario 1: Test received tables from a named snapshot.
Details:
  TestName: testTablesFromNamedSnapshot
  Description: Here, we are checking if the appropriate list of tables is returned when a snapshot name is provided.
Execution:
    Arrange: For this, we must ensure that the snapshot name exists in the method map `tablePresentInOneSnapshotOnly`.
    Act: The `getTablesPresentInOneSnapshotOnly(snapshot)` method is invoked using the existing snapshot name.
    Assert: Check if the returned list matches the expected list of tables.
Validation:
    The test verifies that the map `tablePresentInOneSnapshotOnly` is correctly queried with the snapshot name and that the list returned matches the expected list of tables. If the snapshot name doesn't exist in the map, an empty list should be returned, as per the method's behavior.


Scenario 2: Test received tables from a non-existing snapshot.
Details:
  TestName: testTablesFromNonExistingSnapshot
  Description: In this scenario, we test the behavior of the method when a snapshot name that does not exist is provided.
Execution:
    Arrange: Ensure that the snapshot name does not exist in the method map `tablePresentInOneSnapshotOnly`.
    Act: The `getTablesPresentInOneSnapshotOnly(snapshot)` method is invoked using the non-existing snapshot name.
    Assert: Check if the returned list is empty.
Validation:
    The assertion verifies that if a snapshot name that does not exist in the map `tablePresentInOneSnapshotOnly` is provided, then the method correctly returns an empty list.



Scenario 3: Test received tables from a null snapshot.
Details:
  TestName: testTablesFromNullSnapshot
  Description: The test checks the behavior of the method when a null snapshot name is provided.
Execution:
    Arrange: N/A
    Act: The `getTablesPresentInOneSnapshotOnly(snapshot)` method is invoked using the null snapshot name.
    Assert: Check if the returned list is empty.
Validation:
    The assertion validates that when a null snapshot name is provided, then the method correctly returns an empty list. This test is important to verify the function's behavior with null input.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.dbaccess.snapshot.equality;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.junit.jupiter.api.*;
import com.axway.ats.common.PublicAtsApi;

public class DatabaseEqualityStateGetTablesPresentInOneSnapshotOnlyTest {

	@Test
	@Tag("valid")
	public void testTablesFromNamedSnapshot() {
		DatabaseEqualityState des = new DatabaseEqualityState("snapshot1", "snapshot2");
		Map<String, List<String>> tablePresentInOneSnapshotOnly = new TreeMap<>();
		List<String> tables = Arrays.asList("table1", "table2", "table3");
		tablePresentInOneSnapshotOnly.put("snapshot1", tables);
		des.addTablePresentInOneSnapshotOnly("snapshot1", "table1");
		des.addTablePresentInOneSnapshotOnly("snapshot1", "table2");
		des.addTablePresentInOneSnapshotOnly("snapshot1", "table3");
		assertEquals(tables, des.getTablesPresentInOneSnapshotOnly("snapshot1"));
	}

	@Test
	@Tag("invalid")
	public void testTablesFromNonExistingSnapshot() {
		DatabaseEqualityState des = new DatabaseEqualityState("snapshot1", "snapshot2");
		Map<String, List<String>> tablePresentInOneSnapshotOnly = new TreeMap<>();
		List<String> tables = new ArrayList<>();
		tablePresentInOneSnapshotOnly.put("snapshot1", tables);
		assertEquals(new ArrayList<>(), des.getTablesPresentInOneSnapshotOnly("snapshot3"));
	}

	@Test
	@Tag("boundary")
	public void testTablesFromNullSnapshot() {
		DatabaseEqualityState des = new DatabaseEqualityState("snapshot1", "snapshot2");
		Map<String, List<String>> tablePresentInOneSnapshotOnly = new TreeMap<>();
		List<String> tables = new ArrayList<>();
		tablePresentInOneSnapshotOnly.put("snapshot1", tables);
		assertEquals(new ArrayList<>(), des.getTablesPresentInOneSnapshotOnly(null));
	}

}