/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=FileSystemOperationException_55c4870c5b
ROOST_METHOD_SIG_HASH=FileSystemOperationException_847404d8db
Scenario 1: Validate FileSystemOperationException with Null Exception Parameter
Details:
  TestName: validateFileSystemOperationExceptionWithNullException
  Description: The test is meant to check the response of the method when a null exception parameter is passed. It aims to validate the behaviour of the method in scenario of exceptional cases and error handling.
Execution:
  Arrange: Create the FileSystemOperationException object with a null parameter.
  Act: Invoke the FileSystemOperationException method with the null exception parameter.
  Assert: Use JUnit assertions to expect a null pointer exception.
Validation:
  The assertion aims to verify that the method handles null exception and throws a null pointer exception. This test ensures the robustness of the method in handling error scenarios.
Scenario 2: Validate Proper Exception Handling by FileSystemOperationException
Details:
  TestName: testProperExceptionHandlingByMethod
  Description: This test aims to check if the FileSystemOperationException method does proper exception handling and encapsulation when provided with a valid exception object.
Execution:
  Arrange: Create a valid exception object to be passed as parameter.
  Act: Invoke the FileSystemOperationException method with the created exception object.
  Assert: Use JUnit assertions to confirm that the encapsulated exception in the FileSystemOperationException object is the same as the exception passed.
Validation:
  The assertion aims to check if the exception encapsulation is properly done by the method. This test affirms the functionality of the method in the face of thrown exceptions.
Scenario 3: Validate Exception Message in FileSystemOperationException
Details:
  TestName: validateExceptionMessageInMethod
  Description: The test is meant to check if the message of the exception thrown matches the message of the exception passed to the FileSystemOperationException method.
Execution:
  Arrange: Create an exception object with a specific message.
  Act: Invoke the FileSystemOperationException method and pass the exception object as a parameter.
  Assert: Use JUnit assertions to confirm that the message of the thrown exception matches the message of the exception object passed.
Validation:
  This assertion verifies that the message of the exception passed is accurately displayed. The test confirms that information is not lost or changed even when another exception class wraps it.
*/
// ********RoostGPT********
package com.axway.ats.common.filesystem;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import com.axway.ats.common.PublicAtsApi;
import com.axway.ats.common.filesystem.FileSystemOperationException;
import org.junit.jupiter.api.*;

@Tag("com.axway.ats.common.filesystem")
@Tag("com.axway.ats.common.filesystem.FileSystemOperationException")
public class FileSystemOperationException4Test {

	@Test
	@Tag("invalid")
	public void validateFileSystemOperationExceptionWithNullException() {
		Exception testException = null;
		try {
			FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(testException);
			Assertions.fail("Expected NullPointerException to be thrown.");
		}
		catch (NullPointerException e) {
			Assertions.assertEquals("NULL exception cannot be encapsulated.", e.getMessage());
		}
	}

	@Test
	@Tag("valid")
	public void testProperExceptionHandlingByMethod() {
		Exception testException = new Exception("Test Exception.");
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(testException);
		Assertions.assertEquals(testException, fileSystemOperationException.getCause(),
				"The encapsulated exception object should match the test Exception object.");
	}

	@Test
	@Tag("valid")
	public void validateExceptionMessageInMethod() {
		String exceptionMessage = "Test Exception Message.";
		Exception testException = new Exception(exceptionMessage);
		FileSystemOperationException fileSystemOperationException = new FileSystemOperationException(testException);
		Assertions.assertTrue(fileSystemOperationException.getMessage().contains(exceptionMessage),
				"The FileSystemOperationException message should contain the test Exception message.");
	}

}