/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getDefaultPort_fe6925e609
ROOST_METHOD_SIG_HASH=getDefaultPort_a4e3d1acb9

"""
  Scenario 1: Test for FTP
  Details:
    TestName: testGetDefaultPortForFTP
    Description: This test checks whether the getDefaultPort() function returns the correct default port for the FTP protocol, which is 21.
  Execution:
    Arrange: No preparation required.
    Act: Invoke getDefaultPort() method and set entity with FTP protocol.
    Assert: Assert that the value returned by getDefaultPort() is 21.
  Validation:
    This test confirms that the getDefaultPort() correctly returns the default port for FTP. This is crucial for establishing successful connections to FTP servers.

  Scenario 2: Test for SFTP
  Details:
    TestName: testGetDefaultPortForSFTP
    Description: This test is intended to ensure that the method getDefaultPort() returns the correct default port for SFTP, which is 22.
  Execution:
    Arrange: No preparation required.
    Act: Invoke getDefaultPort() method and set entity with SFTP protocol.
    Assert: Assert that the value returned by getDefaultPort() is 22.
  Validation:
    This test verifies that the correct default SFTP port is returned by the getDefaultPort() method, which is necessary for establishing successful connections to SFTP servers.

  Scenario 3: Test for HTTP
  Details:
    TestName: testGetDefaultPortForHTTP
    Description: This test checks whether the getDefaultPort() function returns the correct default port for the HTTP protocol, which is 80.
  Execution:
    Arrange: No preparation required.
    Act: Invoke getDefaultPort() method and set entity with HTTP protocol.
    Assert: Assert that the value returned by getDefaultPort() is 80.
  Validation:
    This test confirms that the getDefaultPort() correctly returns the default port for HTTP. This is important for establishing successful connections to HTTP servers.

  Scenario 4: Test for Invalid Protocol
  Details:
    TestName: testGetDefaultPortForInvalidProtocol
    Description: This test is for the scenario when an invalid protocol is provided. In this case, we expect a RuntimeException to be thrown.
  Execution:
    Arrange: Set up an invalid protocol for the entity.
    Act: Invoke the getDefaultPort() method on the entity with the invalid protocol.
    Assert: Assert that a RuntimeException is thrown.
  Validation:
    This test validates that the method correctly throws a RuntimeException when an unsupported protocol is provided. This is important to break the flow of execution and prevent potentially undefined behavior or incorrect results.
"""

*/

// ********RoostGPT********

package com.axway.ats.common.filetransfer;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import com.axway.ats.common.PublicAtsApi;

public class TransferProtocolGetDefaultPortTest {

	@Test
	@Tag("valid")
	public void testGetDefaultPortForFTP() {
		TransferProtocol transferProtocol = TransferProtocol.FTP;
		int port = transferProtocol.getDefaultPort();
		Assertions.assertEquals(21, port);
	}

	@Test
	@Tag("valid")
	public void testGetDefaultPortForSFTP() {
		TransferProtocol transferProtocol = TransferProtocol.SFTP;
		int port = transferProtocol.getDefaultPort();
		Assertions.assertEquals(22, port);
	}

	@Test
	@Tag("valid")
	public void testGetDefaultPortForHTTP() {
		TransferProtocol transferProtocol = TransferProtocol.HTTP;
		int port = transferProtocol.getDefaultPort();
		Assertions.assertEquals(80, port);
	}

	@Test
	@Tag("invalid")
	public void testGetDefaultPortForInvalidProtocol() {
		TransferProtocol transferProtocol = null;
		Assertions.assertThrows(RuntimeException.class, () -> {
			transferProtocol.getDefaultPort();
		});
	}

}