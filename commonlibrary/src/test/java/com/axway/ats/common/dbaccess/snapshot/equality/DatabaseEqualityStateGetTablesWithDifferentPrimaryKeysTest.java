/*
 * Copyright 2017-2020 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getTablesWithDifferentPrimaryKeys_7f6678ab32
ROOST_METHOD_SIG_HASH=getTablesWithDifferentPrimaryKeys_f12f3a3422

"""
Scenario 1: Test getTablesWithDifferentPrimaryKeys with snapshot name that exists.

Details:
  TestName: getTablesWithDifferentPrimaryKeysWhenSnapshotExists.
  Description: This test aims to verify that the correct list of tables with different primary keys is returned when a valid snapshot name is provided. The provided snapshot name exists and contains records.
Execution:
  Arrange: Create a snapshot and add different primary keys to it.
  Act: Invoke getTablesWithDifferentPrimaryKeys with the snapshot name as parameters.
  Assert: Assert that the returned list matches the expected list of tables with different primary keys.
Validation:
  This assertion checks whether the function correctly retrieves the list of tables with different primary keys for a given snapshot. It is essential to validate the correctness of the database states.

Scenario 2: Test getTablesWithDifferentPrimaryKeys with snapshot name that doesn't exist.

Details:
  TestName: getTablesWithDifferentPrimaryKeysWhenSnapshotDoesNotExist.
  Description: The goal of this test is to ensure that an empty list is returned when getTablesWithDifferentPrimaryKeys is called with a snapshot name that does not exist in the database.
Execution:
  Arrange: No setup needed as the snapshot does not exist.
  Act: Call getTablesWithDifferentPrimaryKeys using a snapshot name that doesn't exist in the database.
  Assert: Ensure that the returned list is empty.
Validation:
  The assertion verifies that attempting to access non-existing snapshots will not cause failures but instead return an empty list. It's critical for ensuring the robustness of the system.

Scenario 3: Test getTablesWithDifferentPrimaryKeys with snapshot name as an empty string.

Details:
  TestName: getTablesWithDifferentPrimaryKeysWhenSnapshotNameIsEmpty.
  Description: This test validates that getTablesWithDifferentPrimaryKeys does not throw an error or exception when given an empty string as the snapshot name, instead it should return an empty list.
Execution:
  Arrange: Create an empty string for the snapshot name.
  Act: Invoke getTablesWithDifferentPrimaryKeys with the empty string as a parameter.
  Assert: Assert that the result is an empty list.
Validation:
  This assertion checks that the function handles edge cases, such as an empty snapshot name. It's essential for maintaining data integrity and ensuring the function's robustness.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.dbaccess.snapshot.equality;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import com.axway.ats.common.DatabaseEqualityState;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import com.axway.ats.common.PublicAtsApi;

class DatabaseEqualityStateGetTablesWithDifferentPrimaryKeysTest {

	private DatabaseEqualityState databaseEqualityState;

	@BeforeEach
	void setUp() {
		databaseEqualityState = new DatabaseEqualityState("testSnapshot1", "testSnapshot2");
	}

	@Test
	@Tag("valid")
	void getTablesWithDifferentPrimaryKeysWhenSnapshotExists() {
		Map<String, String> primaryKeys = new TreeMap<>();
		primaryKeys.put("table1", "PrimaryKey1");
		primaryKeys.put("table2", "PrimaryKey2");
		databaseEqualityState.addDifferentPrimaryKeys("testSnapshot1", "testSnapshot2", "PrimaryKey1", "PrimaryKey2",
				"table1");
		List<String> result = databaseEqualityState.getTablesWithDifferentPrimaryKeys("testSnapshot1");
		assertEquals(1, result.size());
		assertEquals("table1", result.get(0));
	}

	@Test
	@Tag("invalid")
	void getTablesWithDifferentPrimaryKeysWhenSnapshotDoesNotExist() {
		List<String> result = databaseEqualityState.getTablesWithDifferentPrimaryKeys("nonExistentSnapshot");
		assertTrue(result.isEmpty());
	}

	@Test
	@Tag("boundary")
	void getTablesWithDifferentPrimaryKeysWhenSnapshotNameIsEmpty() {
		List<String> result = databaseEqualityState.getTablesWithDifferentPrimaryKeys("");
		assertTrue(result.isEmpty());
	}

}