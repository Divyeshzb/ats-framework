/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getNewCopy_814e896909
ROOST_METHOD_SIG_HASH=getNewCopy_b00c5d8d5c

Scenario 1: Test for Correct Assignment of Bean Properties in getNewCopy Method

Details:
  TestName: copyAttributesSuccessfully.
  Description: This test is to validate that the getNewCopy method correctly assigns all properties of the parent bean to the new bean.
Execution:
  Arrange: Initialize a ParentProcessReadingBean instance with arbitrary parameter values.
  Act: Invoke getNewCopy method.
  Assert: Compare the attribute values of the new bean with the initial bean.
Validation:
  The assertion checks if all the values of the new bean match the ones from the parent bean. This is expected because the method should create a new object with the same attribute values as the current object. This test ensures the method correctly duplicates an object.

Scenario 2: Test for Non-Null Return Value

Details:
  TestName: returnNonNullValue.
  Description: This test is designed to check whether the getNewCopy method returns a non-null value.
Execution:
  Arrange: Initialize a ParentProcessReadingBean instance.
  Act: Invoke getNewCopy method.
  Assert: Check if the returned object is not null.
Validation:
  The assertion verifies that the method doesn't return a null value. This is expected as the getNewCopy should always create and return a new instance of ParentProcessReadingBean.

Scenario 3: Test for Independent Copy Creation

Details:
  TestName: createsIndependentCopy
  Description: Test is devised to check whether changes administered to the new child object do not affect the parent bean object.
Execution:
  Arrange: Create a ParentProcessReadingBean instance and get a new copy using getNewCopy method.
  Act: Modify some attributes of the child object.
  Assert: Compare the values of the original object and the modified new child object.
Validation:
  The assertion checks that changes to the child object do not affect the original parent object. This is desired as getNewCopy is expected to return a new, independent copy of the object.

Scenario 4: Testing for the Consistency of the New Object's Class Type

Details:
  TestName: confirmNewCopyInstanceType
  Description: This test validates that the getNewCopy method returns an object of type ParentProcessReadingBean.
Execution:
  Arrange: Initialize a ParentProcessReadingBean instance.
  Act: Invoke getNewCopy on the instance.
  Assert: Check if the returned object is an instance of ParentProcessReadingBean.
Validation:
  The assert verifies that an instance of ParentProcessReadingBean is returned. As the current object's attributes are copied to this new instance, the type of the newly created object should be ParentProcessReadingBean.

*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

class ParentProcessReadingBeanGetNewCopyTest {

	@Test
	@Tag("valid")
	void copyAttributesSuccessfully() {
		ParentProcessReadingBean parentBean = new ParentProcessReadingBean(123, "TestMonitorClass", "TestParent",
				"TestName", "TestUnit");
		ParentProcessReadingBean newBean = parentBean.getNewCopy();
		// all public getters used to assert copied attributes
		assertEquals(parentBean.getTheNameOfThisParentProcess(), newBean.getTheNameOfThisParentProcess());
		assertEquals(parentBean.getMonitorName(), newBean.getMonitorName());
		assertEquals(parentBean.getName(), newBean.getName());
		assertEquals(parentBean.getUnit(), newBean.getUnit());
		assertEquals(parentBean.getDbId(), newBean.getDbId());
	}

	@Test
	@Tag("valid")
	void returnNonNullValue() {
		ParentProcessReadingBean parentBean = new ParentProcessReadingBean();
		ParentProcessReadingBean newBean = parentBean.getNewCopy();
		assertNotNull(newBean, "getNewCopy should return non-null value");
	}

	@Test
	@Tag("valid")
	void createsIndependentCopy() {
		ParentProcessReadingBean parentBean = new ParentProcessReadingBean(123, "TestMonitorClass", "TestParent",
				"TestName", "TestUnit");

		ParentProcessReadingBean newBean = parentBean.getNewCopy();
		newBean.setName("NewName");
		newBean.setNewInstanceFlag(false);
		// Assert that changes to new object do not affect parent
		assertFalse(parentBean.getName().equals(newBean.getName()));
		assertTrue(parentBean.isNewInstance());
	}

	@Test
	@Tag("valid")
	void confirmNewCopyInstanceType() {
		ParentProcessReadingBean parentBean = new ParentProcessReadingBean();

		ParentProcessReadingBean newBean = parentBean.getNewCopy();
		assertTrue(newBean instanceof ParentProcessReadingBean,
				"The new object should be instance of ParentProcessReadingBean");
	}

}