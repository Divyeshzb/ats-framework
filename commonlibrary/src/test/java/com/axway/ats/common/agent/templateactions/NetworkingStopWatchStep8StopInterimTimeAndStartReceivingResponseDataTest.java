/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=step8_stopInterimTimeAndStartReceivingResponseData_c37892ec41
ROOST_METHOD_SIG_HASH=step8_stopInterimTimeAndStartReceivingResponseData_67a7a7aa7e

"""
Scenario 1: The interim timer between request and response is stopped and the timer for receiving network data is resumed.

Details:
  TestName: stopInterimAndResumeReceivingDataTimerTest
  Description: This test is meant to check whether the 'step8_stopInterimTimeAndStartReceivingResponseData' method correctly stops the interim timer between request and response while resuming the timer for receiving network data.

Execution:
  Arrange: Set up the NetworkingStopWatch object and ensure all the preceding steps are called in order to mirror a real-world scenario.
  Act: Invoke the 'step8_stopInterimTimeAndStartReceivingResponseData' method.
  Assert: Use JUnit assertions to compare the state of the stop watches after the method call to the expected state, which is the timerBetweenReqAndResp stopped and timerNetAndServerProcessingTime resumed.

Validation:
  The assertion aims to verify that the timers for the network data request-response process are handled correctly. The expected result is determined by the steps defined in a typical network request process. The significant of this test in the application context is to ensure accurate tracking of time taken in different intervals of a network request-response process.


Scenario 2: The interim timer between request and response is already stopped.

Details:
  TestName: interimTimerAlreadyStoppedTest
  Description: This test is meant to check whether the 'step8_stopInterimTimeAndStartReceivingResponseData' method correctly handles the scenario when the interim timer is already stopped.

Execution:
  Arrange: Set up the NetworkingStopWatch object, manually stop the timerBetweenReqAndResp before the method call to mimic the scenario.
  Act: Invoke the 'step8_stopInterimTimeAndStartReceivingResponseData' method.
  Assert: Use JUnit assertions to ensure no exceptions are thrown.

Validation:
  The assertion aims to verify that the method handles the scenario of the interim timer already being stopped without any errors. The expected result is that the operation is idempotent and the method call should not result in any exception being thrown. This test is significant in ensuring the robustness of the application against variations in network latency and operation order.


Scenario 3: The timer for receiving network data is already resumed.

Details:
  TestName: receivingDataTimerAlreadyResumedTest
  Description: This test is meant to check whether the 'step8_stopInterimTimeAndStartReceivingResponseData' method correctly handles the scenario when the timer for receiving network data is already resumed.

Execution:
  Arrange: Set up the NetworkingStopWatch object, manually resume the timerNetAndServerProcessingTime before the method call to mimic the scenario.
  Act: Invoke the 'step8_stopInterimTimeAndStartReceivingResponseData' method.
  Assert: Use JUnit assertions to ensure no exceptions are thrown.

Validation:
  The assertion aims to verify that the method handles the scenario of the receiving data timer already being resumed without any errors. The expected result is that the operation is idempotent and the method call should not result in any exception being thrown. This test is significant in ensuring the robustness of the application against variations in network latency and operation order.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.agent.templateactions;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.apache.commons.lang3.time.StopWatch;
import org.apache.log4j.Logger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class NetworkingStopWatchStep8StopInterimTimeAndStartReceivingResponseDataTest {

	private NetworkingStopWatch networkingStopWatch;

	@BeforeEach
	public void setUp() {
		networkingStopWatch = new NetworkingStopWatch("testAction");
	}

	@Test
	@Tag("valid")
	public void stopInterimAndResumeReceivingDataTimerTest() {
		networkingStopWatch.step1_OpenConnectionForRequest();
		networkingStopWatch.step2_OpenedConnectionForRequest();
		networkingStopWatch.step3_StartSendingRequest();
		networkingStopWatch.step4_EndSendingRequest();
		networkingStopWatch.step5_StartInterimTimer();
		networkingStopWatch.step6_StartGetResponseCode();
		networkingStopWatch.step7_EndGetResponseCode();
		networkingStopWatch.step8_stopInterimTimeAndStartReceivingResponseData();
		assertTrue(networkingStopWatch.getNetTimer().isStarted());
		assertTrue(!networkingStopWatch.getTimeBetweenReqAndResponse().isStarted());
	}

	@Test
	@Tag("valid")
	public void interimTimerAlreadyStoppedTest() {
		networkingStopWatch.step1_OpenConnectionForRequest();
		networkingStopWatch.step2_OpenedConnectionForRequest();
		networkingStopWatch.step3_StartSendingRequest();
		networkingStopWatch.step4_EndSendingRequest();
		networkingStopWatch.step5_StartInterimTimer();
		networkingStopWatch.timerBetweenReqAndResp.stop();
		networkingStopWatch.step6_StartGetResponseCode();
		networkingStopWatch.step7_EndGetResponseCode();
		assertDoesNotThrow(() -> networkingStopWatch.step8_stopInterimTimeAndStartReceivingResponseData());
	}

	@Test
	@Tag("valid")
	public void receivingDataTimerAlreadyResumedTest() {
		networkingStopWatch.step1_OpenConnectionForRequest();
		networkingStopWatch.step2_OpenedConnectionForRequest();
		networkingStopWatch.step3_StartSendingRequest();
		networkingStopWatch.step4_EndSendingRequest();
		networkingStopWatch.step5_StartInterimTimer();
		networkingStopWatch.step6_StartGetResponseCode();
		networkingStopWatch.step7_EndGetResponseCode();
		networkingStopWatch.timerNetAndServerProcessingTime.resume();
		assertDoesNotThrow(() -> networkingStopWatch.step8_stopInterimTimeAndStartReceivingResponseData());
	}

}