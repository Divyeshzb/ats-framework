/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=equals_0bfb2e2872
ROOST_METHOD_SIG_HASH=equals_f4eca31364

Scenarios:

Scenario 1: Matching properties in ReadingBean instances

Details:
TestName: compareSameBeanInstances
Description: The test will check if the equals method correctly detects when all properties of two ReadingBean instances are matching.
Execution:
  Arrange: Create two instances of ReadingBean with identical details.
  Act: Invoke the equals method, passing one instance into the other's equals method.
  Assert: Verify that the method returns "true".
Validation:
  The assertion verifies that the equals method can correctly identify when two ReadingBean instances are matching, taking into account lifecycle properties. This would be significant in validating consistency, enabling reliable checks for ReadingBean comparisons.

Scenario 2: Difference in name property of ReadingBean instances

Details:
TestName: compareDifferentNameBeans
Description: The test will check if the equals method correctly detects when the Name differs in two ReadingBean instances.
Execution:
  Arrange: Create two instances of ReadingBean with differing Names.
  Act: Invoke the equals method, passing one instance into the other's equals method.
  Assert: Verify that the method returns "false".
Validation:
  The assertion verifies that the equals method can correctly identify when the Name property of two ReadingBean instances are not identical. This is relevant in differentiating ReadingBean objects based on their Names, a key identification feature.

Scenario 3: Difference in parameters of ReadingBean instances

Details:
TestName: compareDifferentParameterBeans
Description: The test will check if the equals method correctly detects when the parameters differ in two ReadingBean instances.
Execution:
  Arrange: Create two instances of ReadingBean with differing parameters.
  Act: Invoke the equals method, passing one instance into the other's equals method.
  Assert: Verify that the method returns "false".
Validation:
  The assertion verifies that the equals method can identify non-matching parameters in ReadingBean instances. This functionality is crucial for applications that use parameters as differentiating attributes of ReadingBeans.

Scenario 4: Non-ReadingBean object comparison

Details:
TestName: compareNonReadingBean
Description: The test will check if the equals method returns false when a non-ReadingBean object is compared.
Execution:
  Arrange: Create a ReadingBean instance and a non-ReadingBean object.
  Act: Invoke the equals method, passing the non-ReadingBean object into the ReadingBean's equals method.
  Assert: Verify that the method returns "false".
Validation:
  The assertion verifies that the equals method can handle and correctly respond when a non-ReadingBean object is compared. It helps in maintaining type safety and avoid erroneous comparisons.

Scenario 5: Null object comparison

Details:
TestName: compareWithNullObject
Description: The test will check if the equals method can handle a null object comparison without throwing an exception.
Execution:
  Arrange: Create a ReadingBean instance and a null object.
  Act: Invoke the equals method, passing the null object into the ReadingBean's equals method.
  Assert: Verify that the method returns "false", demonstrating the safeguard against NullPointerException.
Validation:
  The assertion verifies that the equals method can correctly respond when a null object is compared. This is important for preventing unexpected NullPointer Exceptions during object comparisons.
*/

// ********RoostGPT********

package com.axway.ats.common.performance.monitor.beans;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import com.axway.ats.common.PublicAtsApi;

public class ReadingBeanEqualsTest {

	@Tag("valid")
	@Test
	public void compareSameBeanInstances() {
		ReadingBean readingBean1 = new ReadingBean();
		readingBean1.setName("TestBean");
		Map<String, String> parameters = new HashMap<>();
		parameters.put("param1", "value1");
		readingBean1.setParameters(parameters);
		ReadingBean readingBean2 = new ReadingBean();
		readingBean2.setName("TestBean");
		readingBean2.setParameters(parameters);
		assertTrue(readingBean1.equals(readingBean2));
	}

	@Tag("invalid")
	@Test
	public void compareDifferentNameBeans() {
		ReadingBean readingBean1 = new ReadingBean();
		readingBean1.setName("TestBean1");
		Map<String, String> parameters = new HashMap<>();
		parameters.put("param1", "value1");
		readingBean1.setParameters(parameters);
		ReadingBean readingBean2 = new ReadingBean();
		readingBean2.setName("TestBean2");
		readingBean2.setParameters(parameters);
		assertFalse(readingBean1.equals(readingBean2));
	}

	@Tag("invalid")
	@Test
	public void compareDifferentParameterBeans() {
		ReadingBean readingBean1 = new ReadingBean();
		readingBean1.setName("TestBean");
		Map<String, String> parameters1 = new HashMap<>();
		parameters1.put("param1", "value1");
		readingBean1.setParameters(parameters1);
		ReadingBean readingBean2 = new ReadingBean();
		readingBean2.setName("TestBean");
		Map<String, String> parameters2 = new HashMap<>();
		parameters2.put("param2", "value2");
		readingBean2.setParameters(parameters2);
		assertFalse(readingBean1.equals(readingBean2));
	}

	@Tag("invalid")
	@Test
	public void compareNonReadingBean() {
		ReadingBean readingBean = new ReadingBean();
		readingBean.setName("TestBean");
		Map<String, String> parameters = new HashMap<>();
		parameters.put("param1", "value1");
		readingBean.setParameters(parameters);
		String nonReadingBean = "TestNonBean";
		assertFalse(readingBean.equals(nonReadingBean));
	}

	@Tag("boundary")
	@Test
	public void compareWithNullObject() {
		ReadingBean readingBean = new ReadingBean();
		readingBean.setName("TestBean");
		Map<String, String> parameters = new HashMap<>();
		parameters.put("param1", "value1");
		readingBean.setParameters(parameters);
		ReadingBean nullBean = null;
		assertFalse(readingBean.equals(nullBean));
	}

}