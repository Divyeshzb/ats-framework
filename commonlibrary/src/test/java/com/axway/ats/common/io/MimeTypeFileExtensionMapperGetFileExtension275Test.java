/*
 * Copyright 2017 Axway Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=getFileExtension_67d73de76d
ROOST_METHOD_SIG_HASH=getFileExtension_776f24ffd1

Scenario 1: Test when contentType is null

Details:
  TestName: getFileExtensionWhenContentTypeIsNull
  Description: This test checks the functionality when the contentType passed is null. The getFileExtension method should return null in this scenario.
Execution:
  Arrange: Pass null as the contentType, and any String for the contentEncoding.
  Act: Invoke the getFileExtension method.
  Assert: Assert that the returned value is null.
Validation:
  The test verifies that when the contentType is null, the method returns null, adhering to the method logic.

Scenario 2: Test when contentType does not exist in Properties

Details:
  TestName: getFileExtensionWhenContentTypeIsNotPresent
  Description: This test ensures that the method behaves appropriately when the contentType is not in the Properties.
Execution:
  Arrange: Pass a contentType that does not exist in the contentTypeFileExtProps, and any string as contentEncoding.
  Act: Invoke the getFileExtension method.
  Assert: Assert that the returned value is null.
Validation:
  The test verifies that when the contentType does not exist in the content type property file, the method returns null. This is correct since the contentType does not have a corresponding file extension.

Scenario 3: Test for GZIPPED content

Details:
  TestName: getFileExtensionForGzippedContent
  Description: This test verifies that the method appends the GZIP extension to the original extension when the contentEncoding is GZIP.
Execution:
  Arrange: Pass a contentType that exists in the contentTypeFileExtProps and set contentEncoding as GZIP.
  Act: Invoke the getFileExtension method.
  Assert: Assert that the returned value ends with the ".gz" extension.
Validation:
  The test intends to check that the method correctly adds the GZIP extension when the content encoding is GZIP, adhering to the method logic.

Scenario 4: Test for contentType having semicolon

Details:
  TestName: getFileExtensionForContentTypeWithSemicolon
  Description: This test verifies that the method behaves correctly when the contentType contains a semicolon (;). It should return a file extension for the part of contentType before the semicolon and ignore the part after.
Execution:
  Arrange: Pass a contentType containing a semicolon and an existing file type before the semicolon.
  Act: Invoke the getFileExtension method.
  Assert: Assert that the returned value is equal to the file extension of the part of contentType before the semicolon.
Validation:
  This test confirms that the method correctly identifies content type even when it portrays the content type and encoding within the same string using a semicolon.

Scenario 5: Test for valid contentType

Details:
  TestName: getFileExtensionForValidContentType
  Description: This test checks if the method correctly maps the contentType to the associated file extension based on the contentTypeFileExtProps property.
Execution:
  Arrange: Pass a valid contentType that exists in the contentTypeFileExtProps and any string for contentEncoding.
  Act: Invoke the getFileExtension method.
  Assert: Assert that the returned value is equal to the file extension of the passed contentType.
Validation:
  The test verifies that the method correctly maps a valid contentType to its respective fileExtension. This is crucial to ensure that different content types are correctly identified and handled by the application.
*/

// ********RoostGPT********

package com.axway.ats.common.io;

import org.apache.log4j.Logger;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Assertions;

public class MimeTypeFileExtensionMapperGetFileExtension275Test {

	private final static Logger log = Logger.getLogger(MimeTypeFileExtensionMapper.class);

	public final static String GZIP_CONTENT_ENCODING = "gzip";

	public final static String GZIP_FILE_EXTENSION = "gzip";

	private final static Properties contentTypeFileExtProps = new Properties() {
		private static final long serialVersionUID = 1L;

		{
			try {
				loadFromXML(MimeTypeFileExtensionMapper.class.getResourceAsStream("MimeTypeFileExtensionMapper.xml"));
			}
			catch (Exception e) {
				log.error("Could not load file with mime types to files extension mappings", e);
			}
		}
	};

	@Test
	@Tag("invalid")
	public void getFileExtensionWhenContentTypeIsNull() {
		String result = MimeTypeFileExtensionMapper.getFileExtension(null, "gzip");
		Assertions.assertNull(result);
	}

	@Test
	@Tag("invalid")
	public void getFileExtensionWhenContentTypeIsNotPresent() {
		String result = MimeTypeFileExtensionMapper.getFileExtension("NotPresent", "gzip");
		Assertions.assertNull(result);
	}

	@Test
	@Tag("valid")
	public void getFileExtensionForGzippedContent() {
		String result = MimeTypeFileExtensionMapper.getFileExtension("application/xml", "gzip");
		Assertions.assertTrue(result.endsWith(".gzip"));
	}

	@Test
	@Tag("valid")
	public void getFileExtensionForContentTypeWithSemicolon() {
		String result = MimeTypeFileExtensionMapper.getFileExtension("application/xml;charset=utf-8", "gzip");
		Assertions.assertEquals("xml.gzip", result);
	}

	@Test
	@Tag("valid")
	public void getFileExtensionForValidContentType() {
		String result = MimeTypeFileExtensionMapper.getFileExtension("application/xml", "gzip");
		Assertions.assertEquals("xml.gzip", result);
	}

}