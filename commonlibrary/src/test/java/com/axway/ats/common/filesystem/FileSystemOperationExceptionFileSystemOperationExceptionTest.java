// ********RoostGPT********
/*
Test generated by RoostGPT for test axway-java-test using AI Type  and AI Model

ROOST_METHOD_HASH=FileSystemOperationException_65b5b8bed7
ROOST_METHOD_SIG_HASH=FileSystemOperationException_a1a1cd3209

"""
  Scenario 1: Testing FileSystemOperationException with null message.

  Details:
    TestName: testConstructorWithNullMessage.
    Description: This test is meant to check the behavior of the FileSystemOperationException constructor when null is given as an input parameter.
  Execution:
    Arrange: No set up required as we are just initializing an instance with null.
    Act: Invoke the FileSystemOperationException constructor with null input.
    Assert: Verify that the exception message is null.
  Validation:
    We want to verify that the FileSystemOperationException constructor can handle null input without throwing any unintended exceptions. The expected result is null because the constructor should accept null as a valid input.


  Scenario 2: Testing FileSystemOperationException with an empty message.

  Details:
    TestName: testConstructorWithEmptyMessage.
    Description: To check the FileSystemOperationException constructor when an empty string is given as an input parameter.
  Execution:
    Arrange: No data preparation needed since we're simply initializing an instance with an empty string.
    Act: Call the FileSystemOperationException constructor using an empty string input.
    Assert: Make sure the exception message is an empty string.
  Validation:
    We want to confirm that the FileSystemOperationException constructor is capable of processing an empty string without triggering unintended exceptions. The expected output is an empty string since it was the initial input.

  Scenario 3: Testing FileSystemOperationException with a message.

  Details:
    TestName: testConstructorWithMessage.
    Description: This test is designed to check the FileSystemOperationException constructor when a string message is given as an input parameter.
  Execution:
    Arrange: No set up needed as we're merely initializing an instance with a message.
    Act: Invoke FileSystemOperationException constructor with a string message input.
    Assert: Verify that the exception message matches the input message.
  Validation:
    We aim to validate that FileSystemOperationException constructor properly assigns the message provided as an input parameter to the exception and that no unexpected exceptions are thrown. The expected result is the input message as the exception message should match the input.
"""
*/

// ********RoostGPT********

package com.axway.ats.common.filesystem;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import com.axway.ats.common.PublicAtsApi;

public class FileSystemOperationExceptionFileSystemOperationExceptionTest {

	@Test
	@Tag("invalid")
	public void testConstructorWithNullMessage() {
		FileSystemOperationException exception = new FileSystemOperationException(null);
		assertNull(exception.getMessage());
	}

	@Test
	@Tag("invalid")
	public void testConstructorWithEmptyMessage() {
		FileSystemOperationException exception = new FileSystemOperationException("");
		assertEquals("", exception.getMessage());
	}

	@Test
	@Tag("valid")
	public void testConstructorWithMessage() {
		String message = "Test message";
		FileSystemOperationException exception = new FileSystemOperationException(message);
		assertEquals(message, exception.getMessage());
	}

}